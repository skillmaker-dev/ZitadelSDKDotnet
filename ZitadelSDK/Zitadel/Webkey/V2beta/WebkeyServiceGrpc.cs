// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/webkey/v2beta/webkey_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Webkey.V2beta {
  /// <summary>
  /// Service to manage web keys for OIDC token signing and validation.
  /// The service provides methods to create, activate, delete and list web keys.
  /// The public key endpoint (outside of this service) is used to retrieve the public keys of the active and inactive keys.
  ///
  /// Please make sure to enable the `web_key` feature flag on your instance to use this service.
  /// </summary>
  public static partial class WebKeyService
  {
    static readonly string __ServiceName = "zitadel.webkey.v2beta.WebKeyService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.CreateWebKeyRequest> __Marshaller_zitadel_webkey_v2beta_CreateWebKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.CreateWebKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.CreateWebKeyResponse> __Marshaller_zitadel_webkey_v2beta_CreateWebKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.CreateWebKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest> __Marshaller_zitadel_webkey_v2beta_ActivateWebKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse> __Marshaller_zitadel_webkey_v2beta_ActivateWebKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest> __Marshaller_zitadel_webkey_v2beta_DeleteWebKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse> __Marshaller_zitadel_webkey_v2beta_DeleteWebKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.ListWebKeysRequest> __Marshaller_zitadel_webkey_v2beta_ListWebKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.ListWebKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Webkey.V2beta.ListWebKeysResponse> __Marshaller_zitadel_webkey_v2beta_ListWebKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Webkey.V2beta.ListWebKeysResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Webkey.V2beta.CreateWebKeyRequest, global::Zitadel.Webkey.V2beta.CreateWebKeyResponse> __Method_CreateWebKey = new grpc::Method<global::Zitadel.Webkey.V2beta.CreateWebKeyRequest, global::Zitadel.Webkey.V2beta.CreateWebKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateWebKey",
        __Marshaller_zitadel_webkey_v2beta_CreateWebKeyRequest,
        __Marshaller_zitadel_webkey_v2beta_CreateWebKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest, global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse> __Method_ActivateWebKey = new grpc::Method<global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest, global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateWebKey",
        __Marshaller_zitadel_webkey_v2beta_ActivateWebKeyRequest,
        __Marshaller_zitadel_webkey_v2beta_ActivateWebKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest, global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse> __Method_DeleteWebKey = new grpc::Method<global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest, global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteWebKey",
        __Marshaller_zitadel_webkey_v2beta_DeleteWebKeyRequest,
        __Marshaller_zitadel_webkey_v2beta_DeleteWebKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Webkey.V2beta.ListWebKeysRequest, global::Zitadel.Webkey.V2beta.ListWebKeysResponse> __Method_ListWebKeys = new grpc::Method<global::Zitadel.Webkey.V2beta.ListWebKeysRequest, global::Zitadel.Webkey.V2beta.ListWebKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWebKeys",
        __Marshaller_zitadel_webkey_v2beta_ListWebKeysRequest,
        __Marshaller_zitadel_webkey_v2beta_ListWebKeysResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Webkey.V2beta.WebkeyServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of WebKeyService</summary>
    [grpc::BindServiceMethod(typeof(WebKeyService), "BindService")]
    public abstract partial class WebKeyServiceBase
    {
      /// <summary>
      /// Create Web Key
      ///
      /// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
      /// The public key can be used to validate OIDC tokens.
      /// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      ///
      /// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Webkey.V2beta.CreateWebKeyResponse> CreateWebKey(global::Zitadel.Webkey.V2beta.CreateWebKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate Web Key
      ///
      /// Switch the active signing web key. The previously active key will be deactivated.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
      /// as the public key may not have been propagated to caches and clients yet.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse> ActivateWebKey(global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Web Key
      ///
      /// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
      /// any tokens signed by this key will be invalid.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// In case the web key is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the web key was deleted during the request.
      ///
      /// Required permission:
      ///   - `iam.web_key.delete`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse> DeleteWebKey(global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Web Keys
      ///
      /// List all web keys and their states.
      ///
      /// Required permission:
      ///   - `iam.web_key.read`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Webkey.V2beta.ListWebKeysResponse> ListWebKeys(global::Zitadel.Webkey.V2beta.ListWebKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for WebKeyService</summary>
    public partial class WebKeyServiceClient : grpc::ClientBase<WebKeyServiceClient>
    {
      /// <summary>Creates a new client for WebKeyService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WebKeyServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WebKeyService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WebKeyServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WebKeyServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WebKeyServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create Web Key
      ///
      /// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
      /// The public key can be used to validate OIDC tokens.
      /// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      ///
      /// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.CreateWebKeyResponse CreateWebKey(global::Zitadel.Webkey.V2beta.CreateWebKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWebKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Web Key
      ///
      /// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
      /// The public key can be used to validate OIDC tokens.
      /// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      ///
      /// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.CreateWebKeyResponse CreateWebKey(global::Zitadel.Webkey.V2beta.CreateWebKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateWebKey, null, options, request);
      }
      /// <summary>
      /// Create Web Key
      ///
      /// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
      /// The public key can be used to validate OIDC tokens.
      /// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      ///
      /// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.CreateWebKeyResponse> CreateWebKeyAsync(global::Zitadel.Webkey.V2beta.CreateWebKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateWebKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Web Key
      ///
      /// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
      /// The public key can be used to validate OIDC tokens.
      /// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      ///
      /// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.CreateWebKeyResponse> CreateWebKeyAsync(global::Zitadel.Webkey.V2beta.CreateWebKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateWebKey, null, options, request);
      }
      /// <summary>
      /// Activate Web Key
      ///
      /// Switch the active signing web key. The previously active key will be deactivated.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
      /// as the public key may not have been propagated to caches and clients yet.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse ActivateWebKey(global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateWebKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Web Key
      ///
      /// Switch the active signing web key. The previously active key will be deactivated.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
      /// as the public key may not have been propagated to caches and clients yet.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse ActivateWebKey(global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateWebKey, null, options, request);
      }
      /// <summary>
      /// Activate Web Key
      ///
      /// Switch the active signing web key. The previously active key will be deactivated.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
      /// as the public key may not have been propagated to caches and clients yet.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse> ActivateWebKeyAsync(global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateWebKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Web Key
      ///
      /// Switch the active signing web key. The previously active key will be deactivated.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
      /// as the public key may not have been propagated to caches and clients yet.
      ///
      /// Required permission:
      ///   - `iam.web_key.write`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse> ActivateWebKeyAsync(global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateWebKey, null, options, request);
      }
      /// <summary>
      /// Delete Web Key
      ///
      /// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
      /// any tokens signed by this key will be invalid.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// In case the web key is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the web key was deleted during the request.
      ///
      /// Required permission:
      ///   - `iam.web_key.delete`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse DeleteWebKey(global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWebKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Web Key
      ///
      /// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
      /// any tokens signed by this key will be invalid.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// In case the web key is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the web key was deleted during the request.
      ///
      /// Required permission:
      ///   - `iam.web_key.delete`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse DeleteWebKey(global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteWebKey, null, options, request);
      }
      /// <summary>
      /// Delete Web Key
      ///
      /// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
      /// any tokens signed by this key will be invalid.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// In case the web key is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the web key was deleted during the request.
      ///
      /// Required permission:
      ///   - `iam.web_key.delete`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse> DeleteWebKeyAsync(global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteWebKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Web Key
      ///
      /// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
      /// any tokens signed by this key will be invalid.
      /// Note that the JWKs OIDC endpoint returns a cacheable response.
      /// In case the web key is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the web key was deleted during the request.
      ///
      /// Required permission:
      ///   - `iam.web_key.delete`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse> DeleteWebKeyAsync(global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteWebKey, null, options, request);
      }
      /// <summary>
      /// List Web Keys
      ///
      /// List all web keys and their states.
      ///
      /// Required permission:
      ///   - `iam.web_key.read`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.ListWebKeysResponse ListWebKeys(global::Zitadel.Webkey.V2beta.ListWebKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWebKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Web Keys
      ///
      /// List all web keys and their states.
      ///
      /// Required permission:
      ///   - `iam.web_key.read`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Webkey.V2beta.ListWebKeysResponse ListWebKeys(global::Zitadel.Webkey.V2beta.ListWebKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWebKeys, null, options, request);
      }
      /// <summary>
      /// List Web Keys
      ///
      /// List all web keys and their states.
      ///
      /// Required permission:
      ///   - `iam.web_key.read`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.ListWebKeysResponse> ListWebKeysAsync(global::Zitadel.Webkey.V2beta.ListWebKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWebKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Web Keys
      ///
      /// List all web keys and their states.
      ///
      /// Required permission:
      ///   - `iam.web_key.read`
      ///
      /// Required feature flag:
      ///   - `web_key`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Webkey.V2beta.ListWebKeysResponse> ListWebKeysAsync(global::Zitadel.Webkey.V2beta.ListWebKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWebKeys, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WebKeyServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WebKeyServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(WebKeyServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateWebKey, serviceImpl.CreateWebKey)
          .AddMethod(__Method_ActivateWebKey, serviceImpl.ActivateWebKey)
          .AddMethod(__Method_DeleteWebKey, serviceImpl.DeleteWebKey)
          .AddMethod(__Method_ListWebKeys, serviceImpl.ListWebKeys).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WebKeyServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateWebKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Webkey.V2beta.CreateWebKeyRequest, global::Zitadel.Webkey.V2beta.CreateWebKeyResponse>(serviceImpl.CreateWebKey));
      serviceBinder.AddMethod(__Method_ActivateWebKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Webkey.V2beta.ActivateWebKeyRequest, global::Zitadel.Webkey.V2beta.ActivateWebKeyResponse>(serviceImpl.ActivateWebKey));
      serviceBinder.AddMethod(__Method_DeleteWebKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Webkey.V2beta.DeleteWebKeyRequest, global::Zitadel.Webkey.V2beta.DeleteWebKeyResponse>(serviceImpl.DeleteWebKey));
      serviceBinder.AddMethod(__Method_ListWebKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Webkey.V2beta.ListWebKeysRequest, global::Zitadel.Webkey.V2beta.ListWebKeysResponse>(serviceImpl.ListWebKeys));
    }

  }
}
#endregion
