// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/project/v2beta/project_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Project.V2beta {
  /// <summary>
  /// Service to manage projects.
  /// </summary>
  public static partial class ProjectService
  {
    static readonly string __ServiceName = "zitadel.project.v2beta.ProjectService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.CreateProjectRequest> __Marshaller_zitadel_project_v2beta_CreateProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.CreateProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.CreateProjectResponse> __Marshaller_zitadel_project_v2beta_CreateProjectResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.CreateProjectResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.UpdateProjectRequest> __Marshaller_zitadel_project_v2beta_UpdateProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.UpdateProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.UpdateProjectResponse> __Marshaller_zitadel_project_v2beta_UpdateProjectResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.UpdateProjectResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeleteProjectRequest> __Marshaller_zitadel_project_v2beta_DeleteProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeleteProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeleteProjectResponse> __Marshaller_zitadel_project_v2beta_DeleteProjectResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeleteProjectResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.GetProjectRequest> __Marshaller_zitadel_project_v2beta_GetProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.GetProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.GetProjectResponse> __Marshaller_zitadel_project_v2beta_GetProjectResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.GetProjectResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ListProjectsRequest> __Marshaller_zitadel_project_v2beta_ListProjectsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ListProjectsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ListProjectsResponse> __Marshaller_zitadel_project_v2beta_ListProjectsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ListProjectsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeactivateProjectRequest> __Marshaller_zitadel_project_v2beta_DeactivateProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeactivateProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeactivateProjectResponse> __Marshaller_zitadel_project_v2beta_DeactivateProjectResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeactivateProjectResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ActivateProjectRequest> __Marshaller_zitadel_project_v2beta_ActivateProjectRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ActivateProjectRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ActivateProjectResponse> __Marshaller_zitadel_project_v2beta_ActivateProjectResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ActivateProjectResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.AddProjectRoleRequest> __Marshaller_zitadel_project_v2beta_AddProjectRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.AddProjectRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.AddProjectRoleResponse> __Marshaller_zitadel_project_v2beta_AddProjectRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.AddProjectRoleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.UpdateProjectRoleRequest> __Marshaller_zitadel_project_v2beta_UpdateProjectRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.UpdateProjectRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.UpdateProjectRoleResponse> __Marshaller_zitadel_project_v2beta_UpdateProjectRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.UpdateProjectRoleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.RemoveProjectRoleRequest> __Marshaller_zitadel_project_v2beta_RemoveProjectRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.RemoveProjectRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.RemoveProjectRoleResponse> __Marshaller_zitadel_project_v2beta_RemoveProjectRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.RemoveProjectRoleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ListProjectRolesRequest> __Marshaller_zitadel_project_v2beta_ListProjectRolesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ListProjectRolesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ListProjectRolesResponse> __Marshaller_zitadel_project_v2beta_ListProjectRolesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ListProjectRolesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.CreateProjectGrantRequest> __Marshaller_zitadel_project_v2beta_CreateProjectGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.CreateProjectGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.CreateProjectGrantResponse> __Marshaller_zitadel_project_v2beta_CreateProjectGrantResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.CreateProjectGrantResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.UpdateProjectGrantRequest> __Marshaller_zitadel_project_v2beta_UpdateProjectGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.UpdateProjectGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.UpdateProjectGrantResponse> __Marshaller_zitadel_project_v2beta_UpdateProjectGrantResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.UpdateProjectGrantResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeleteProjectGrantRequest> __Marshaller_zitadel_project_v2beta_DeleteProjectGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeleteProjectGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeleteProjectGrantResponse> __Marshaller_zitadel_project_v2beta_DeleteProjectGrantResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeleteProjectGrantResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest> __Marshaller_zitadel_project_v2beta_DeactivateProjectGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse> __Marshaller_zitadel_project_v2beta_DeactivateProjectGrantResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ActivateProjectGrantRequest> __Marshaller_zitadel_project_v2beta_ActivateProjectGrantRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ActivateProjectGrantRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ActivateProjectGrantResponse> __Marshaller_zitadel_project_v2beta_ActivateProjectGrantResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ActivateProjectGrantResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ListProjectGrantsRequest> __Marshaller_zitadel_project_v2beta_ListProjectGrantsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ListProjectGrantsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Project.V2beta.ListProjectGrantsResponse> __Marshaller_zitadel_project_v2beta_ListProjectGrantsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Project.V2beta.ListProjectGrantsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.CreateProjectRequest, global::Zitadel.Project.V2beta.CreateProjectResponse> __Method_CreateProject = new grpc::Method<global::Zitadel.Project.V2beta.CreateProjectRequest, global::Zitadel.Project.V2beta.CreateProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateProject",
        __Marshaller_zitadel_project_v2beta_CreateProjectRequest,
        __Marshaller_zitadel_project_v2beta_CreateProjectResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.UpdateProjectRequest, global::Zitadel.Project.V2beta.UpdateProjectResponse> __Method_UpdateProject = new grpc::Method<global::Zitadel.Project.V2beta.UpdateProjectRequest, global::Zitadel.Project.V2beta.UpdateProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProject",
        __Marshaller_zitadel_project_v2beta_UpdateProjectRequest,
        __Marshaller_zitadel_project_v2beta_UpdateProjectResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.DeleteProjectRequest, global::Zitadel.Project.V2beta.DeleteProjectResponse> __Method_DeleteProject = new grpc::Method<global::Zitadel.Project.V2beta.DeleteProjectRequest, global::Zitadel.Project.V2beta.DeleteProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteProject",
        __Marshaller_zitadel_project_v2beta_DeleteProjectRequest,
        __Marshaller_zitadel_project_v2beta_DeleteProjectResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.GetProjectRequest, global::Zitadel.Project.V2beta.GetProjectResponse> __Method_GetProject = new grpc::Method<global::Zitadel.Project.V2beta.GetProjectRequest, global::Zitadel.Project.V2beta.GetProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProject",
        __Marshaller_zitadel_project_v2beta_GetProjectRequest,
        __Marshaller_zitadel_project_v2beta_GetProjectResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.ListProjectsRequest, global::Zitadel.Project.V2beta.ListProjectsResponse> __Method_ListProjects = new grpc::Method<global::Zitadel.Project.V2beta.ListProjectsRequest, global::Zitadel.Project.V2beta.ListProjectsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProjects",
        __Marshaller_zitadel_project_v2beta_ListProjectsRequest,
        __Marshaller_zitadel_project_v2beta_ListProjectsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.DeactivateProjectRequest, global::Zitadel.Project.V2beta.DeactivateProjectResponse> __Method_DeactivateProject = new grpc::Method<global::Zitadel.Project.V2beta.DeactivateProjectRequest, global::Zitadel.Project.V2beta.DeactivateProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateProject",
        __Marshaller_zitadel_project_v2beta_DeactivateProjectRequest,
        __Marshaller_zitadel_project_v2beta_DeactivateProjectResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.ActivateProjectRequest, global::Zitadel.Project.V2beta.ActivateProjectResponse> __Method_ActivateProject = new grpc::Method<global::Zitadel.Project.V2beta.ActivateProjectRequest, global::Zitadel.Project.V2beta.ActivateProjectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateProject",
        __Marshaller_zitadel_project_v2beta_ActivateProjectRequest,
        __Marshaller_zitadel_project_v2beta_ActivateProjectResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.AddProjectRoleRequest, global::Zitadel.Project.V2beta.AddProjectRoleResponse> __Method_AddProjectRole = new grpc::Method<global::Zitadel.Project.V2beta.AddProjectRoleRequest, global::Zitadel.Project.V2beta.AddProjectRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddProjectRole",
        __Marshaller_zitadel_project_v2beta_AddProjectRoleRequest,
        __Marshaller_zitadel_project_v2beta_AddProjectRoleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.UpdateProjectRoleRequest, global::Zitadel.Project.V2beta.UpdateProjectRoleResponse> __Method_UpdateProjectRole = new grpc::Method<global::Zitadel.Project.V2beta.UpdateProjectRoleRequest, global::Zitadel.Project.V2beta.UpdateProjectRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProjectRole",
        __Marshaller_zitadel_project_v2beta_UpdateProjectRoleRequest,
        __Marshaller_zitadel_project_v2beta_UpdateProjectRoleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.RemoveProjectRoleRequest, global::Zitadel.Project.V2beta.RemoveProjectRoleResponse> __Method_RemoveProjectRole = new grpc::Method<global::Zitadel.Project.V2beta.RemoveProjectRoleRequest, global::Zitadel.Project.V2beta.RemoveProjectRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveProjectRole",
        __Marshaller_zitadel_project_v2beta_RemoveProjectRoleRequest,
        __Marshaller_zitadel_project_v2beta_RemoveProjectRoleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.ListProjectRolesRequest, global::Zitadel.Project.V2beta.ListProjectRolesResponse> __Method_ListProjectRoles = new grpc::Method<global::Zitadel.Project.V2beta.ListProjectRolesRequest, global::Zitadel.Project.V2beta.ListProjectRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProjectRoles",
        __Marshaller_zitadel_project_v2beta_ListProjectRolesRequest,
        __Marshaller_zitadel_project_v2beta_ListProjectRolesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.CreateProjectGrantRequest, global::Zitadel.Project.V2beta.CreateProjectGrantResponse> __Method_CreateProjectGrant = new grpc::Method<global::Zitadel.Project.V2beta.CreateProjectGrantRequest, global::Zitadel.Project.V2beta.CreateProjectGrantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateProjectGrant",
        __Marshaller_zitadel_project_v2beta_CreateProjectGrantRequest,
        __Marshaller_zitadel_project_v2beta_CreateProjectGrantResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.UpdateProjectGrantRequest, global::Zitadel.Project.V2beta.UpdateProjectGrantResponse> __Method_UpdateProjectGrant = new grpc::Method<global::Zitadel.Project.V2beta.UpdateProjectGrantRequest, global::Zitadel.Project.V2beta.UpdateProjectGrantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateProjectGrant",
        __Marshaller_zitadel_project_v2beta_UpdateProjectGrantRequest,
        __Marshaller_zitadel_project_v2beta_UpdateProjectGrantResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.DeleteProjectGrantRequest, global::Zitadel.Project.V2beta.DeleteProjectGrantResponse> __Method_DeleteProjectGrant = new grpc::Method<global::Zitadel.Project.V2beta.DeleteProjectGrantRequest, global::Zitadel.Project.V2beta.DeleteProjectGrantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteProjectGrant",
        __Marshaller_zitadel_project_v2beta_DeleteProjectGrantRequest,
        __Marshaller_zitadel_project_v2beta_DeleteProjectGrantResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest, global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse> __Method_DeactivateProjectGrant = new grpc::Method<global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest, global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateProjectGrant",
        __Marshaller_zitadel_project_v2beta_DeactivateProjectGrantRequest,
        __Marshaller_zitadel_project_v2beta_DeactivateProjectGrantResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.ActivateProjectGrantRequest, global::Zitadel.Project.V2beta.ActivateProjectGrantResponse> __Method_ActivateProjectGrant = new grpc::Method<global::Zitadel.Project.V2beta.ActivateProjectGrantRequest, global::Zitadel.Project.V2beta.ActivateProjectGrantResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateProjectGrant",
        __Marshaller_zitadel_project_v2beta_ActivateProjectGrantRequest,
        __Marshaller_zitadel_project_v2beta_ActivateProjectGrantResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Project.V2beta.ListProjectGrantsRequest, global::Zitadel.Project.V2beta.ListProjectGrantsResponse> __Method_ListProjectGrants = new grpc::Method<global::Zitadel.Project.V2beta.ListProjectGrantsRequest, global::Zitadel.Project.V2beta.ListProjectGrantsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListProjectGrants",
        __Marshaller_zitadel_project_v2beta_ListProjectGrantsRequest,
        __Marshaller_zitadel_project_v2beta_ListProjectGrantsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Project.V2beta.ProjectServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProjectService</summary>
    [grpc::BindServiceMethod(typeof(ProjectService), "BindService")]
    public abstract partial class ProjectServiceBase
    {
      /// <summary>
      /// Create Project
      ///
      /// Create a new Project.
      ///
      /// Required permission:
      ///   - `project.create`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.CreateProjectResponse> CreateProject(global::Zitadel.Project.V2beta.CreateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Project
      ///
      /// Update an existing project.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.UpdateProjectResponse> UpdateProject(global::Zitadel.Project.V2beta.UpdateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Project
      ///
      /// Delete an existing project.
      /// In case the project is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.delete`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.DeleteProjectResponse> DeleteProject(global::Zitadel.Project.V2beta.DeleteProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get Project
      ///
      /// Returns the project identified by the requested ID.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.GetProjectResponse> GetProject(global::Zitadel.Project.V2beta.GetProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Projects
      ///
      /// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.ListProjectsResponse> ListProjects(global::Zitadel.Project.V2beta.ListProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate Project
      ///
      /// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
      /// Applications under deactivated projects are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.DeactivateProjectResponse> DeactivateProject(global::Zitadel.Project.V2beta.DeactivateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate Project
      ///
      /// Set the state of a project to active. Request returns no error if the project is already activated.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.ActivateProjectResponse> ActivateProject(global::Zitadel.Project.V2beta.ActivateProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add Project Role
      ///
      /// Add a new project role to a project. The key must be unique within the project.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.AddProjectRoleResponse> AddProjectRole(global::Zitadel.Project.V2beta.AddProjectRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Project Role
      ///
      /// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.UpdateProjectRoleResponse> UpdateProjectRole(global::Zitadel.Project.V2beta.UpdateProjectRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove Project Role
      ///
      /// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.RemoveProjectRoleResponse> RemoveProjectRole(global::Zitadel.Project.V2beta.RemoveProjectRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Project Roles
      ///
      /// Returns all roles of a project matching the search query.
      ///
      /// Required permission:
      ///   - `project.role.read`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.ListProjectRolesResponse> ListProjectRoles(global::Zitadel.Project.V2beta.ListProjectRolesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create Project Grant
      ///
      /// Grant a project to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.create`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.CreateProjectGrantResponse> CreateProjectGrant(global::Zitadel.Project.V2beta.CreateProjectGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Project Grant
      ///
      /// Change the roles of the project that is granted to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.UpdateProjectGrantResponse> UpdateProjectGrant(global::Zitadel.Project.V2beta.UpdateProjectGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Project Grant
      ///
      /// Delete a project grant. All user grants for this project grant will also be removed.
      /// A user will not have access to the project afterward (if permissions are checked).
      /// In case the project grant is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.grant.delete`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.DeleteProjectGrantResponse> DeleteProjectGrant(global::Zitadel.Project.V2beta.DeleteProjectGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate Project Grant
      ///
      /// Set the state of the project grant to deactivated.
      /// Applications under deactivated projects grants are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse> DeactivateProjectGrant(global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate Project Grant
      ///
      /// Set the state of the project grant to activated.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.ActivateProjectGrantResponse> ActivateProjectGrant(global::Zitadel.Project.V2beta.ActivateProjectGrantRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Project Grants
      ///
      /// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Project.V2beta.ListProjectGrantsResponse> ListProjectGrants(global::Zitadel.Project.V2beta.ListProjectGrantsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ProjectService</summary>
    public partial class ProjectServiceClient : grpc::ClientBase<ProjectServiceClient>
    {
      /// <summary>Creates a new client for ProjectService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProjectServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ProjectService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ProjectServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProjectServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ProjectServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create Project
      ///
      /// Create a new Project.
      ///
      /// Required permission:
      ///   - `project.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.CreateProjectResponse CreateProject(global::Zitadel.Project.V2beta.CreateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Project
      ///
      /// Create a new Project.
      ///
      /// Required permission:
      ///   - `project.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.CreateProjectResponse CreateProject(global::Zitadel.Project.V2beta.CreateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateProject, null, options, request);
      }
      /// <summary>
      /// Create Project
      ///
      /// Create a new Project.
      ///
      /// Required permission:
      ///   - `project.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.CreateProjectResponse> CreateProjectAsync(global::Zitadel.Project.V2beta.CreateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Project
      ///
      /// Create a new Project.
      ///
      /// Required permission:
      ///   - `project.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.CreateProjectResponse> CreateProjectAsync(global::Zitadel.Project.V2beta.CreateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateProject, null, options, request);
      }
      /// <summary>
      /// Update Project
      ///
      /// Update an existing project.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.UpdateProjectResponse UpdateProject(global::Zitadel.Project.V2beta.UpdateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Project
      ///
      /// Update an existing project.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.UpdateProjectResponse UpdateProject(global::Zitadel.Project.V2beta.UpdateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProject, null, options, request);
      }
      /// <summary>
      /// Update Project
      ///
      /// Update an existing project.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.UpdateProjectResponse> UpdateProjectAsync(global::Zitadel.Project.V2beta.UpdateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Project
      ///
      /// Update an existing project.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.UpdateProjectResponse> UpdateProjectAsync(global::Zitadel.Project.V2beta.UpdateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProject, null, options, request);
      }
      /// <summary>
      /// Delete Project
      ///
      /// Delete an existing project.
      /// In case the project is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeleteProjectResponse DeleteProject(global::Zitadel.Project.V2beta.DeleteProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Project
      ///
      /// Delete an existing project.
      /// In case the project is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeleteProjectResponse DeleteProject(global::Zitadel.Project.V2beta.DeleteProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProject, null, options, request);
      }
      /// <summary>
      /// Delete Project
      ///
      /// Delete an existing project.
      /// In case the project is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeleteProjectResponse> DeleteProjectAsync(global::Zitadel.Project.V2beta.DeleteProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Project
      ///
      /// Delete an existing project.
      /// In case the project is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeleteProjectResponse> DeleteProjectAsync(global::Zitadel.Project.V2beta.DeleteProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProject, null, options, request);
      }
      /// <summary>
      /// Get Project
      ///
      /// Returns the project identified by the requested ID.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.GetProjectResponse GetProject(global::Zitadel.Project.V2beta.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Project
      ///
      /// Returns the project identified by the requested ID.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.GetProjectResponse GetProject(global::Zitadel.Project.V2beta.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProject, null, options, request);
      }
      /// <summary>
      /// Get Project
      ///
      /// Returns the project identified by the requested ID.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.GetProjectResponse> GetProjectAsync(global::Zitadel.Project.V2beta.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Project
      ///
      /// Returns the project identified by the requested ID.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.GetProjectResponse> GetProjectAsync(global::Zitadel.Project.V2beta.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProject, null, options, request);
      }
      /// <summary>
      /// List Projects
      ///
      /// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ListProjectsResponse ListProjects(global::Zitadel.Project.V2beta.ListProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Projects
      ///
      /// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ListProjectsResponse ListProjects(global::Zitadel.Project.V2beta.ListProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProjects, null, options, request);
      }
      /// <summary>
      /// List Projects
      ///
      /// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ListProjectsResponse> ListProjectsAsync(global::Zitadel.Project.V2beta.ListProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Projects
      ///
      /// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `project.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ListProjectsResponse> ListProjectsAsync(global::Zitadel.Project.V2beta.ListProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProjects, null, options, request);
      }
      /// <summary>
      /// Deactivate Project
      ///
      /// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
      /// Applications under deactivated projects are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeactivateProjectResponse DeactivateProject(global::Zitadel.Project.V2beta.DeactivateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Project
      ///
      /// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
      /// Applications under deactivated projects are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeactivateProjectResponse DeactivateProject(global::Zitadel.Project.V2beta.DeactivateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateProject, null, options, request);
      }
      /// <summary>
      /// Deactivate Project
      ///
      /// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
      /// Applications under deactivated projects are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeactivateProjectResponse> DeactivateProjectAsync(global::Zitadel.Project.V2beta.DeactivateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Project
      ///
      /// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
      /// Applications under deactivated projects are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeactivateProjectResponse> DeactivateProjectAsync(global::Zitadel.Project.V2beta.DeactivateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateProject, null, options, request);
      }
      /// <summary>
      /// Activate Project
      ///
      /// Set the state of a project to active. Request returns no error if the project is already activated.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ActivateProjectResponse ActivateProject(global::Zitadel.Project.V2beta.ActivateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Project
      ///
      /// Set the state of a project to active. Request returns no error if the project is already activated.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ActivateProjectResponse ActivateProject(global::Zitadel.Project.V2beta.ActivateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateProject, null, options, request);
      }
      /// <summary>
      /// Activate Project
      ///
      /// Set the state of a project to active. Request returns no error if the project is already activated.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ActivateProjectResponse> ActivateProjectAsync(global::Zitadel.Project.V2beta.ActivateProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Project
      ///
      /// Set the state of a project to active. Request returns no error if the project is already activated.
      ///
      /// Required permission:
      ///   - `project.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ActivateProjectResponse> ActivateProjectAsync(global::Zitadel.Project.V2beta.ActivateProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateProject, null, options, request);
      }
      /// <summary>
      /// Add Project Role
      ///
      /// Add a new project role to a project. The key must be unique within the project.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.AddProjectRoleResponse AddProjectRole(global::Zitadel.Project.V2beta.AddProjectRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddProjectRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Project Role
      ///
      /// Add a new project role to a project. The key must be unique within the project.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.AddProjectRoleResponse AddProjectRole(global::Zitadel.Project.V2beta.AddProjectRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddProjectRole, null, options, request);
      }
      /// <summary>
      /// Add Project Role
      ///
      /// Add a new project role to a project. The key must be unique within the project.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.AddProjectRoleResponse> AddProjectRoleAsync(global::Zitadel.Project.V2beta.AddProjectRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddProjectRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Project Role
      ///
      /// Add a new project role to a project. The key must be unique within the project.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.AddProjectRoleResponse> AddProjectRoleAsync(global::Zitadel.Project.V2beta.AddProjectRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddProjectRole, null, options, request);
      }
      /// <summary>
      /// Update Project Role
      ///
      /// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.UpdateProjectRoleResponse UpdateProjectRole(global::Zitadel.Project.V2beta.UpdateProjectRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Project Role
      ///
      /// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.UpdateProjectRoleResponse UpdateProjectRole(global::Zitadel.Project.V2beta.UpdateProjectRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProjectRole, null, options, request);
      }
      /// <summary>
      /// Update Project Role
      ///
      /// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.UpdateProjectRoleResponse> UpdateProjectRoleAsync(global::Zitadel.Project.V2beta.UpdateProjectRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Project Role
      ///
      /// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.UpdateProjectRoleResponse> UpdateProjectRoleAsync(global::Zitadel.Project.V2beta.UpdateProjectRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProjectRole, null, options, request);
      }
      /// <summary>
      /// Remove Project Role
      ///
      /// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.RemoveProjectRoleResponse RemoveProjectRole(global::Zitadel.Project.V2beta.RemoveProjectRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveProjectRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove Project Role
      ///
      /// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.RemoveProjectRoleResponse RemoveProjectRole(global::Zitadel.Project.V2beta.RemoveProjectRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveProjectRole, null, options, request);
      }
      /// <summary>
      /// Remove Project Role
      ///
      /// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.RemoveProjectRoleResponse> RemoveProjectRoleAsync(global::Zitadel.Project.V2beta.RemoveProjectRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveProjectRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove Project Role
      ///
      /// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
      ///
      /// Required permission:
      ///   - `project.role.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.RemoveProjectRoleResponse> RemoveProjectRoleAsync(global::Zitadel.Project.V2beta.RemoveProjectRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveProjectRole, null, options, request);
      }
      /// <summary>
      /// List Project Roles
      ///
      /// Returns all roles of a project matching the search query.
      ///
      /// Required permission:
      ///   - `project.role.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ListProjectRolesResponse ListProjectRoles(global::Zitadel.Project.V2beta.ListProjectRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Project Roles
      ///
      /// Returns all roles of a project matching the search query.
      ///
      /// Required permission:
      ///   - `project.role.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ListProjectRolesResponse ListProjectRoles(global::Zitadel.Project.V2beta.ListProjectRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProjectRoles, null, options, request);
      }
      /// <summary>
      /// List Project Roles
      ///
      /// Returns all roles of a project matching the search query.
      ///
      /// Required permission:
      ///   - `project.role.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ListProjectRolesResponse> ListProjectRolesAsync(global::Zitadel.Project.V2beta.ListProjectRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Project Roles
      ///
      /// Returns all roles of a project matching the search query.
      ///
      /// Required permission:
      ///   - `project.role.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ListProjectRolesResponse> ListProjectRolesAsync(global::Zitadel.Project.V2beta.ListProjectRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProjectRoles, null, options, request);
      }
      /// <summary>
      /// Create Project Grant
      ///
      /// Grant a project to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.CreateProjectGrantResponse CreateProjectGrant(global::Zitadel.Project.V2beta.CreateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProjectGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Project Grant
      ///
      /// Grant a project to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.CreateProjectGrantResponse CreateProjectGrant(global::Zitadel.Project.V2beta.CreateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Create Project Grant
      ///
      /// Grant a project to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.CreateProjectGrantResponse> CreateProjectGrantAsync(global::Zitadel.Project.V2beta.CreateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateProjectGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Project Grant
      ///
      /// Grant a project to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.create`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.CreateProjectGrantResponse> CreateProjectGrantAsync(global::Zitadel.Project.V2beta.CreateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Update Project Grant
      ///
      /// Change the roles of the project that is granted to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.UpdateProjectGrantResponse UpdateProjectGrant(global::Zitadel.Project.V2beta.UpdateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Project Grant
      ///
      /// Change the roles of the project that is granted to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.UpdateProjectGrantResponse UpdateProjectGrant(global::Zitadel.Project.V2beta.UpdateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Update Project Grant
      ///
      /// Change the roles of the project that is granted to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.UpdateProjectGrantResponse> UpdateProjectGrantAsync(global::Zitadel.Project.V2beta.UpdateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateProjectGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Project Grant
      ///
      /// Change the roles of the project that is granted to another organization.
      /// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.UpdateProjectGrantResponse> UpdateProjectGrantAsync(global::Zitadel.Project.V2beta.UpdateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Delete Project Grant
      ///
      /// Delete a project grant. All user grants for this project grant will also be removed.
      /// A user will not have access to the project afterward (if permissions are checked).
      /// In case the project grant is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.grant.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeleteProjectGrantResponse DeleteProjectGrant(global::Zitadel.Project.V2beta.DeleteProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProjectGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Project Grant
      ///
      /// Delete a project grant. All user grants for this project grant will also be removed.
      /// A user will not have access to the project afterward (if permissions are checked).
      /// In case the project grant is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.grant.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeleteProjectGrantResponse DeleteProjectGrant(global::Zitadel.Project.V2beta.DeleteProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProjectGrant, null, options, request);
      }
      /// <summary>
      /// Delete Project Grant
      ///
      /// Delete a project grant. All user grants for this project grant will also be removed.
      /// A user will not have access to the project afterward (if permissions are checked).
      /// In case the project grant is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.grant.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeleteProjectGrantResponse> DeleteProjectGrantAsync(global::Zitadel.Project.V2beta.DeleteProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProjectGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Project Grant
      ///
      /// Delete a project grant. All user grants for this project grant will also be removed.
      /// A user will not have access to the project afterward (if permissions are checked).
      /// In case the project grant is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `project.grant.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeleteProjectGrantResponse> DeleteProjectGrantAsync(global::Zitadel.Project.V2beta.DeleteProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProjectGrant, null, options, request);
      }
      /// <summary>
      /// Deactivate Project Grant
      ///
      /// Set the state of the project grant to deactivated.
      /// Applications under deactivated projects grants are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse DeactivateProjectGrant(global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateProjectGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Project Grant
      ///
      /// Set the state of the project grant to deactivated.
      /// Applications under deactivated projects grants are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse DeactivateProjectGrant(global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Deactivate Project Grant
      ///
      /// Set the state of the project grant to deactivated.
      /// Applications under deactivated projects grants are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse> DeactivateProjectGrantAsync(global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateProjectGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Project Grant
      ///
      /// Set the state of the project grant to deactivated.
      /// Applications under deactivated projects grants are not able to login anymore.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse> DeactivateProjectGrantAsync(global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Activate Project Grant
      ///
      /// Set the state of the project grant to activated.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ActivateProjectGrantResponse ActivateProjectGrant(global::Zitadel.Project.V2beta.ActivateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateProjectGrant(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Project Grant
      ///
      /// Set the state of the project grant to activated.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ActivateProjectGrantResponse ActivateProjectGrant(global::Zitadel.Project.V2beta.ActivateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateProjectGrant, null, options, request);
      }
      /// <summary>
      /// Activate Project Grant
      ///
      /// Set the state of the project grant to activated.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ActivateProjectGrantResponse> ActivateProjectGrantAsync(global::Zitadel.Project.V2beta.ActivateProjectGrantRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateProjectGrantAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Project Grant
      ///
      /// Set the state of the project grant to activated.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ActivateProjectGrantResponse> ActivateProjectGrantAsync(global::Zitadel.Project.V2beta.ActivateProjectGrantRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateProjectGrant, null, options, request);
      }
      /// <summary>
      /// List Project Grants
      ///
      /// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ListProjectGrantsResponse ListProjectGrants(global::Zitadel.Project.V2beta.ListProjectGrantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectGrants(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Project Grants
      ///
      /// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Project.V2beta.ListProjectGrantsResponse ListProjectGrants(global::Zitadel.Project.V2beta.ListProjectGrantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListProjectGrants, null, options, request);
      }
      /// <summary>
      /// List Project Grants
      ///
      /// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ListProjectGrantsResponse> ListProjectGrantsAsync(global::Zitadel.Project.V2beta.ListProjectGrantsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListProjectGrantsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Project Grants
      ///
      /// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
      ///
      /// Required permission:
      ///   - `project.grant.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Project.V2beta.ListProjectGrantsResponse> ListProjectGrantsAsync(global::Zitadel.Project.V2beta.ListProjectGrantsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListProjectGrants, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ProjectServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ProjectServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateProject, serviceImpl.CreateProject)
          .AddMethod(__Method_UpdateProject, serviceImpl.UpdateProject)
          .AddMethod(__Method_DeleteProject, serviceImpl.DeleteProject)
          .AddMethod(__Method_GetProject, serviceImpl.GetProject)
          .AddMethod(__Method_ListProjects, serviceImpl.ListProjects)
          .AddMethod(__Method_DeactivateProject, serviceImpl.DeactivateProject)
          .AddMethod(__Method_ActivateProject, serviceImpl.ActivateProject)
          .AddMethod(__Method_AddProjectRole, serviceImpl.AddProjectRole)
          .AddMethod(__Method_UpdateProjectRole, serviceImpl.UpdateProjectRole)
          .AddMethod(__Method_RemoveProjectRole, serviceImpl.RemoveProjectRole)
          .AddMethod(__Method_ListProjectRoles, serviceImpl.ListProjectRoles)
          .AddMethod(__Method_CreateProjectGrant, serviceImpl.CreateProjectGrant)
          .AddMethod(__Method_UpdateProjectGrant, serviceImpl.UpdateProjectGrant)
          .AddMethod(__Method_DeleteProjectGrant, serviceImpl.DeleteProjectGrant)
          .AddMethod(__Method_DeactivateProjectGrant, serviceImpl.DeactivateProjectGrant)
          .AddMethod(__Method_ActivateProjectGrant, serviceImpl.ActivateProjectGrant)
          .AddMethod(__Method_ListProjectGrants, serviceImpl.ListProjectGrants).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProjectServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.CreateProjectRequest, global::Zitadel.Project.V2beta.CreateProjectResponse>(serviceImpl.CreateProject));
      serviceBinder.AddMethod(__Method_UpdateProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.UpdateProjectRequest, global::Zitadel.Project.V2beta.UpdateProjectResponse>(serviceImpl.UpdateProject));
      serviceBinder.AddMethod(__Method_DeleteProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.DeleteProjectRequest, global::Zitadel.Project.V2beta.DeleteProjectResponse>(serviceImpl.DeleteProject));
      serviceBinder.AddMethod(__Method_GetProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.GetProjectRequest, global::Zitadel.Project.V2beta.GetProjectResponse>(serviceImpl.GetProject));
      serviceBinder.AddMethod(__Method_ListProjects, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.ListProjectsRequest, global::Zitadel.Project.V2beta.ListProjectsResponse>(serviceImpl.ListProjects));
      serviceBinder.AddMethod(__Method_DeactivateProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.DeactivateProjectRequest, global::Zitadel.Project.V2beta.DeactivateProjectResponse>(serviceImpl.DeactivateProject));
      serviceBinder.AddMethod(__Method_ActivateProject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.ActivateProjectRequest, global::Zitadel.Project.V2beta.ActivateProjectResponse>(serviceImpl.ActivateProject));
      serviceBinder.AddMethod(__Method_AddProjectRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.AddProjectRoleRequest, global::Zitadel.Project.V2beta.AddProjectRoleResponse>(serviceImpl.AddProjectRole));
      serviceBinder.AddMethod(__Method_UpdateProjectRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.UpdateProjectRoleRequest, global::Zitadel.Project.V2beta.UpdateProjectRoleResponse>(serviceImpl.UpdateProjectRole));
      serviceBinder.AddMethod(__Method_RemoveProjectRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.RemoveProjectRoleRequest, global::Zitadel.Project.V2beta.RemoveProjectRoleResponse>(serviceImpl.RemoveProjectRole));
      serviceBinder.AddMethod(__Method_ListProjectRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.ListProjectRolesRequest, global::Zitadel.Project.V2beta.ListProjectRolesResponse>(serviceImpl.ListProjectRoles));
      serviceBinder.AddMethod(__Method_CreateProjectGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.CreateProjectGrantRequest, global::Zitadel.Project.V2beta.CreateProjectGrantResponse>(serviceImpl.CreateProjectGrant));
      serviceBinder.AddMethod(__Method_UpdateProjectGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.UpdateProjectGrantRequest, global::Zitadel.Project.V2beta.UpdateProjectGrantResponse>(serviceImpl.UpdateProjectGrant));
      serviceBinder.AddMethod(__Method_DeleteProjectGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.DeleteProjectGrantRequest, global::Zitadel.Project.V2beta.DeleteProjectGrantResponse>(serviceImpl.DeleteProjectGrant));
      serviceBinder.AddMethod(__Method_DeactivateProjectGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.DeactivateProjectGrantRequest, global::Zitadel.Project.V2beta.DeactivateProjectGrantResponse>(serviceImpl.DeactivateProjectGrant));
      serviceBinder.AddMethod(__Method_ActivateProjectGrant, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.ActivateProjectGrantRequest, global::Zitadel.Project.V2beta.ActivateProjectGrantResponse>(serviceImpl.ActivateProjectGrant));
      serviceBinder.AddMethod(__Method_ListProjectGrants, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Project.V2beta.ListProjectGrantsRequest, global::Zitadel.Project.V2beta.ListProjectGrantsResponse>(serviceImpl.ListProjectGrants));
    }

  }
}
#endregion
