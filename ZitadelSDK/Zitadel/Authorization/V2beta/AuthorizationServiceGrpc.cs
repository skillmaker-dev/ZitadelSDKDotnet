// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/authorization/v2beta/authorization_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Authorization.V2beta {
  /// <summary>
  /// AuthorizationService provides methods to manage authorizations for users within your projects and applications.
  ///
  /// For managing permissions and roles for ZITADEL internal resources, like organizations, projects,
  /// users, etc., please use the InternalPermissionService.
  /// </summary>
  public static partial class AuthorizationService
  {
    static readonly string __ServiceName = "zitadel.authorization.v2beta.AuthorizationService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest> __Marshaller_zitadel_authorization_v2beta_ListAuthorizationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse> __Marshaller_zitadel_authorization_v2beta_ListAuthorizationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest> __Marshaller_zitadel_authorization_v2beta_CreateAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse> __Marshaller_zitadel_authorization_v2beta_CreateAuthorizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest> __Marshaller_zitadel_authorization_v2beta_UpdateAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse> __Marshaller_zitadel_authorization_v2beta_UpdateAuthorizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest> __Marshaller_zitadel_authorization_v2beta_DeleteAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse> __Marshaller_zitadel_authorization_v2beta_DeleteAuthorizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest> __Marshaller_zitadel_authorization_v2beta_ActivateAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse> __Marshaller_zitadel_authorization_v2beta_ActivateAuthorizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest> __Marshaller_zitadel_authorization_v2beta_DeactivateAuthorizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse> __Marshaller_zitadel_authorization_v2beta_DeactivateAuthorizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest, global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse> __Method_ListAuthorizations = new grpc::Method<global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest, global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAuthorizations",
        __Marshaller_zitadel_authorization_v2beta_ListAuthorizationsRequest,
        __Marshaller_zitadel_authorization_v2beta_ListAuthorizationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest, global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse> __Method_CreateAuthorization = new grpc::Method<global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest, global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAuthorization",
        __Marshaller_zitadel_authorization_v2beta_CreateAuthorizationRequest,
        __Marshaller_zitadel_authorization_v2beta_CreateAuthorizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest, global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse> __Method_UpdateAuthorization = new grpc::Method<global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest, global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAuthorization",
        __Marshaller_zitadel_authorization_v2beta_UpdateAuthorizationRequest,
        __Marshaller_zitadel_authorization_v2beta_UpdateAuthorizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest, global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse> __Method_DeleteAuthorization = new grpc::Method<global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest, global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAuthorization",
        __Marshaller_zitadel_authorization_v2beta_DeleteAuthorizationRequest,
        __Marshaller_zitadel_authorization_v2beta_DeleteAuthorizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest, global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse> __Method_ActivateAuthorization = new grpc::Method<global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest, global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateAuthorization",
        __Marshaller_zitadel_authorization_v2beta_ActivateAuthorizationRequest,
        __Marshaller_zitadel_authorization_v2beta_ActivateAuthorizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest, global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse> __Method_DeactivateAuthorization = new grpc::Method<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest, global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateAuthorization",
        __Marshaller_zitadel_authorization_v2beta_DeactivateAuthorizationRequest,
        __Marshaller_zitadel_authorization_v2beta_DeactivateAuthorizationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Authorization.V2beta.AuthorizationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AuthorizationService</summary>
    [grpc::BindServiceMethod(typeof(AuthorizationService), "BindService")]
    public abstract partial class AuthorizationServiceBase
    {
      /// <summary>
      /// List Authorizations
      ///
      /// ListAuthorizations returns all authorizations matching the request and necessary permissions.
      ///
      /// Required permissions:
      ///   - "user.grant.read"
      ///   - no permissions required for listing own authorizations
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse> ListAuthorizations(global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create Authorization
      ///
      /// CreateAuthorization creates a new authorization for a user in an owned or granted project.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse> CreateAuthorization(global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Authorization
      ///
      /// UpdateAuthorization updates the authorization.
      ///
      /// Note that any role keys previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse> UpdateAuthorization(global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Authorization
      ///
      /// DeleteAuthorization deletes the authorization.
      ///
      /// In case the authorization is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the authorization was deleted by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.delete"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse> DeleteAuthorization(global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate Authorization
      ///
      /// ActivateAuthorization activates an existing but inactive authorization.
      ///
      /// In case the authorization is already active, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was activated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse> ActivateAuthorization(global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate Authorization
      ///
      /// DeactivateAuthorization deactivates an existing and active authorization.
      ///
      /// In case the authorization is already inactive, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was deactivated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse> DeactivateAuthorization(global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AuthorizationService</summary>
    public partial class AuthorizationServiceClient : grpc::ClientBase<AuthorizationServiceClient>
    {
      /// <summary>Creates a new client for AuthorizationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AuthorizationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AuthorizationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AuthorizationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AuthorizationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AuthorizationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List Authorizations
      ///
      /// ListAuthorizations returns all authorizations matching the request and necessary permissions.
      ///
      /// Required permissions:
      ///   - "user.grant.read"
      ///   - no permissions required for listing own authorizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse ListAuthorizations(global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuthorizations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Authorizations
      ///
      /// ListAuthorizations returns all authorizations matching the request and necessary permissions.
      ///
      /// Required permissions:
      ///   - "user.grant.read"
      ///   - no permissions required for listing own authorizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse ListAuthorizations(global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAuthorizations, null, options, request);
      }
      /// <summary>
      /// List Authorizations
      ///
      /// ListAuthorizations returns all authorizations matching the request and necessary permissions.
      ///
      /// Required permissions:
      ///   - "user.grant.read"
      ///   - no permissions required for listing own authorizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse> ListAuthorizationsAsync(global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAuthorizationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Authorizations
      ///
      /// ListAuthorizations returns all authorizations matching the request and necessary permissions.
      ///
      /// Required permissions:
      ///   - "user.grant.read"
      ///   - no permissions required for listing own authorizations
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse> ListAuthorizationsAsync(global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAuthorizations, null, options, request);
      }
      /// <summary>
      /// Create Authorization
      ///
      /// CreateAuthorization creates a new authorization for a user in an owned or granted project.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse CreateAuthorization(global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Authorization
      ///
      /// CreateAuthorization creates a new authorization for a user in an owned or granted project.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse CreateAuthorization(global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAuthorization, null, options, request);
      }
      /// <summary>
      /// Create Authorization
      ///
      /// CreateAuthorization creates a new authorization for a user in an owned or granted project.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse> CreateAuthorizationAsync(global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Authorization
      ///
      /// CreateAuthorization creates a new authorization for a user in an owned or granted project.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse> CreateAuthorizationAsync(global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAuthorization, null, options, request);
      }
      /// <summary>
      /// Update Authorization
      ///
      /// UpdateAuthorization updates the authorization.
      ///
      /// Note that any role keys previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse UpdateAuthorization(global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Authorization
      ///
      /// UpdateAuthorization updates the authorization.
      ///
      /// Note that any role keys previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse UpdateAuthorization(global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAuthorization, null, options, request);
      }
      /// <summary>
      /// Update Authorization
      ///
      /// UpdateAuthorization updates the authorization.
      ///
      /// Note that any role keys previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse> UpdateAuthorizationAsync(global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Authorization
      ///
      /// UpdateAuthorization updates the authorization.
      ///
      /// Note that any role keys previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse> UpdateAuthorizationAsync(global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAuthorization, null, options, request);
      }
      /// <summary>
      /// Delete Authorization
      ///
      /// DeleteAuthorization deletes the authorization.
      ///
      /// In case the authorization is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the authorization was deleted by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.delete"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse DeleteAuthorization(global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Authorization
      ///
      /// DeleteAuthorization deletes the authorization.
      ///
      /// In case the authorization is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the authorization was deleted by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.delete"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse DeleteAuthorization(global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAuthorization, null, options, request);
      }
      /// <summary>
      /// Delete Authorization
      ///
      /// DeleteAuthorization deletes the authorization.
      ///
      /// In case the authorization is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the authorization was deleted by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.delete"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse> DeleteAuthorizationAsync(global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Authorization
      ///
      /// DeleteAuthorization deletes the authorization.
      ///
      /// In case the authorization is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the authorization was deleted by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.delete"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse> DeleteAuthorizationAsync(global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAuthorization, null, options, request);
      }
      /// <summary>
      /// Activate Authorization
      ///
      /// ActivateAuthorization activates an existing but inactive authorization.
      ///
      /// In case the authorization is already active, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was activated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse ActivateAuthorization(global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Authorization
      ///
      /// ActivateAuthorization activates an existing but inactive authorization.
      ///
      /// In case the authorization is already active, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was activated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse ActivateAuthorization(global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateAuthorization, null, options, request);
      }
      /// <summary>
      /// Activate Authorization
      ///
      /// ActivateAuthorization activates an existing but inactive authorization.
      ///
      /// In case the authorization is already active, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was activated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse> ActivateAuthorizationAsync(global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Authorization
      ///
      /// ActivateAuthorization activates an existing but inactive authorization.
      ///
      /// In case the authorization is already active, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was activated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse> ActivateAuthorizationAsync(global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateAuthorization, null, options, request);
      }
      /// <summary>
      /// Deactivate Authorization
      ///
      /// DeactivateAuthorization deactivates an existing and active authorization.
      ///
      /// In case the authorization is already inactive, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was deactivated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse DeactivateAuthorization(global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateAuthorization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Authorization
      ///
      /// DeactivateAuthorization deactivates an existing and active authorization.
      ///
      /// In case the authorization is already inactive, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was deactivated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse DeactivateAuthorization(global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateAuthorization, null, options, request);
      }
      /// <summary>
      /// Deactivate Authorization
      ///
      /// DeactivateAuthorization deactivates an existing and active authorization.
      ///
      /// In case the authorization is already inactive, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was deactivated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse> DeactivateAuthorizationAsync(global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateAuthorizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Authorization
      ///
      /// DeactivateAuthorization deactivates an existing and active authorization.
      ///
      /// In case the authorization is already inactive, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the change date in the response to verify if the authorization was deactivated by the request.
      ///
      /// Required permissions:
      ///   - "user.grant.write"
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse> DeactivateAuthorizationAsync(global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateAuthorization, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AuthorizationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthorizationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AuthorizationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListAuthorizations, serviceImpl.ListAuthorizations)
          .AddMethod(__Method_CreateAuthorization, serviceImpl.CreateAuthorization)
          .AddMethod(__Method_UpdateAuthorization, serviceImpl.UpdateAuthorization)
          .AddMethod(__Method_DeleteAuthorization, serviceImpl.DeleteAuthorization)
          .AddMethod(__Method_ActivateAuthorization, serviceImpl.ActivateAuthorization)
          .AddMethod(__Method_DeactivateAuthorization, serviceImpl.DeactivateAuthorization).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuthorizationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListAuthorizations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Authorization.V2beta.ListAuthorizationsRequest, global::Zitadel.Authorization.V2beta.ListAuthorizationsResponse>(serviceImpl.ListAuthorizations));
      serviceBinder.AddMethod(__Method_CreateAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Authorization.V2beta.CreateAuthorizationRequest, global::Zitadel.Authorization.V2beta.CreateAuthorizationResponse>(serviceImpl.CreateAuthorization));
      serviceBinder.AddMethod(__Method_UpdateAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Authorization.V2beta.UpdateAuthorizationRequest, global::Zitadel.Authorization.V2beta.UpdateAuthorizationResponse>(serviceImpl.UpdateAuthorization));
      serviceBinder.AddMethod(__Method_DeleteAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Authorization.V2beta.DeleteAuthorizationRequest, global::Zitadel.Authorization.V2beta.DeleteAuthorizationResponse>(serviceImpl.DeleteAuthorization));
      serviceBinder.AddMethod(__Method_ActivateAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Authorization.V2beta.ActivateAuthorizationRequest, global::Zitadel.Authorization.V2beta.ActivateAuthorizationResponse>(serviceImpl.ActivateAuthorization));
      serviceBinder.AddMethod(__Method_DeactivateAuthorization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Authorization.V2beta.DeactivateAuthorizationRequest, global::Zitadel.Authorization.V2beta.DeactivateAuthorizationResponse>(serviceImpl.DeactivateAuthorization));
    }

  }
}
#endregion
