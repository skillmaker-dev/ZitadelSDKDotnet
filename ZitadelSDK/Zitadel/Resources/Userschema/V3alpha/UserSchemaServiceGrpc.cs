// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/resources/userschema/v3alpha/user_schema_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Resources.Userschema.V3alpha {
  public static partial class ZITADELUserSchemas
  {
    static readonly string __ServiceName = "zitadel.resources.userschema.v3alpha.ZITADELUserSchemas";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest> __Marshaller_zitadel_resources_userschema_v3alpha_SearchUserSchemasRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse> __Marshaller_zitadel_resources_userschema_v3alpha_SearchUserSchemasResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest> __Marshaller_zitadel_resources_userschema_v3alpha_GetUserSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse> __Marshaller_zitadel_resources_userschema_v3alpha_GetUserSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest> __Marshaller_zitadel_resources_userschema_v3alpha_CreateUserSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse> __Marshaller_zitadel_resources_userschema_v3alpha_CreateUserSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest> __Marshaller_zitadel_resources_userschema_v3alpha_PatchUserSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse> __Marshaller_zitadel_resources_userschema_v3alpha_PatchUserSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest> __Marshaller_zitadel_resources_userschema_v3alpha_DeactivateUserSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse> __Marshaller_zitadel_resources_userschema_v3alpha_DeactivateUserSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest> __Marshaller_zitadel_resources_userschema_v3alpha_ReactivateUserSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse> __Marshaller_zitadel_resources_userschema_v3alpha_ReactivateUserSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest> __Marshaller_zitadel_resources_userschema_v3alpha_DeleteUserSchemaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse> __Marshaller_zitadel_resources_userschema_v3alpha_DeleteUserSchemaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest, global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse> __Method_SearchUserSchemas = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest, global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchUserSchemas",
        __Marshaller_zitadel_resources_userschema_v3alpha_SearchUserSchemasRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_SearchUserSchemasResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse> __Method_GetUserSchema = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUserSchema",
        __Marshaller_zitadel_resources_userschema_v3alpha_GetUserSchemaRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_GetUserSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse> __Method_CreateUserSchema = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateUserSchema",
        __Marshaller_zitadel_resources_userschema_v3alpha_CreateUserSchemaRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_CreateUserSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse> __Method_PatchUserSchema = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchUserSchema",
        __Marshaller_zitadel_resources_userschema_v3alpha_PatchUserSchemaRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_PatchUserSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse> __Method_DeactivateUserSchema = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateUserSchema",
        __Marshaller_zitadel_resources_userschema_v3alpha_DeactivateUserSchemaRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_DeactivateUserSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse> __Method_ReactivateUserSchema = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReactivateUserSchema",
        __Marshaller_zitadel_resources_userschema_v3alpha_ReactivateUserSchemaRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_ReactivateUserSchemaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse> __Method_DeleteUserSchema = new grpc::Method<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUserSchema",
        __Marshaller_zitadel_resources_userschema_v3alpha_DeleteUserSchemaRequest,
        __Marshaller_zitadel_resources_userschema_v3alpha_DeleteUserSchemaResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Resources.Userschema.V3alpha.UserSchemaServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ZITADELUserSchemas</summary>
    [grpc::BindServiceMethod(typeof(ZITADELUserSchemas), "BindService")]
    public abstract partial class ZITADELUserSchemasBase
    {
      /// <summary>
      /// Search user schemas
      ///
      /// Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse> SearchUserSchemas(global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// User schema by ID
      ///
      /// Returns the user schema identified by the requested ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse> GetUserSchema(global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a user schema
      ///
      /// Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse> CreateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Patch a user schema
      ///
      /// Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse> PatchUserSchema(global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate a user schema
      ///
      /// Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse> DeactivateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reactivate a user schema
      ///
      /// Reactivate an previously deactivated user schema and change it into an active state again.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse> ReactivateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a user schema
      ///
      /// Delete an existing user schema. This operation is only allowed if there are no associated users to it.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse> DeleteUserSchema(global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ZITADELUserSchemas</summary>
    public partial class ZITADELUserSchemasClient : grpc::ClientBase<ZITADELUserSchemasClient>
    {
      /// <summary>Creates a new client for ZITADELUserSchemas</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ZITADELUserSchemasClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ZITADELUserSchemas that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ZITADELUserSchemasClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ZITADELUserSchemasClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ZITADELUserSchemasClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Search user schemas
      ///
      /// Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse SearchUserSchemas(global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchUserSchemas(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search user schemas
      ///
      /// Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse SearchUserSchemas(global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchUserSchemas, null, options, request);
      }
      /// <summary>
      /// Search user schemas
      ///
      /// Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse> SearchUserSchemasAsync(global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchUserSchemasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Search user schemas
      ///
      /// Search all matching user schemas. By default, we will return all user schema of your instance. Make sure to include a limit and sorting for pagination.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse> SearchUserSchemasAsync(global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchUserSchemas, null, options, request);
      }
      /// <summary>
      /// User schema by ID
      ///
      /// Returns the user schema identified by the requested ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse GetUserSchema(global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// User schema by ID
      ///
      /// Returns the user schema identified by the requested ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse GetUserSchema(global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUserSchema, null, options, request);
      }
      /// <summary>
      /// User schema by ID
      ///
      /// Returns the user schema identified by the requested ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse> GetUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUserSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// User schema by ID
      ///
      /// Returns the user schema identified by the requested ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse> GetUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUserSchema, null, options, request);
      }
      /// <summary>
      /// Create a user schema
      ///
      /// Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse CreateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUserSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a user schema
      ///
      /// Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse CreateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateUserSchema, null, options, request);
      }
      /// <summary>
      /// Create a user schema
      ///
      /// Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse> CreateUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUserSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a user schema
      ///
      /// Create the first revision of a new user schema. The schema can then be used on users to store and validate their data.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse> CreateUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateUserSchema, null, options, request);
      }
      /// <summary>
      /// Patch a user schema
      ///
      /// Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse PatchUserSchema(global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchUserSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch a user schema
      ///
      /// Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse PatchUserSchema(global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchUserSchema, null, options, request);
      }
      /// <summary>
      /// Patch a user schema
      ///
      /// Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse> PatchUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchUserSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Patch a user schema
      ///
      /// Patch an existing user schema to a new revision. Users based on the current revision will not be affected until they are updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse> PatchUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchUserSchema, null, options, request);
      }
      /// <summary>
      /// Deactivate a user schema
      ///
      /// Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse DeactivateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateUserSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a user schema
      ///
      /// Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse DeactivateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateUserSchema, null, options, request);
      }
      /// <summary>
      /// Deactivate a user schema
      ///
      /// Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse> DeactivateUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateUserSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate a user schema
      ///
      /// Deactivate an existing user schema and change it into a read-only state. Users based on this schema cannot be updated anymore, but are still able to authenticate.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse> DeactivateUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateUserSchema, null, options, request);
      }
      /// <summary>
      /// Reactivate a user schema
      ///
      /// Reactivate an previously deactivated user schema and change it into an active state again.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse ReactivateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReactivateUserSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reactivate a user schema
      ///
      /// Reactivate an previously deactivated user schema and change it into an active state again.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse ReactivateUserSchema(global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReactivateUserSchema, null, options, request);
      }
      /// <summary>
      /// Reactivate a user schema
      ///
      /// Reactivate an previously deactivated user schema and change it into an active state again.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse> ReactivateUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReactivateUserSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reactivate a user schema
      ///
      /// Reactivate an previously deactivated user schema and change it into an active state again.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse> ReactivateUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReactivateUserSchema, null, options, request);
      }
      /// <summary>
      /// Delete a user schema
      ///
      /// Delete an existing user schema. This operation is only allowed if there are no associated users to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse DeleteUserSchema(global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserSchema(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a user schema
      ///
      /// Delete an existing user schema. This operation is only allowed if there are no associated users to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse DeleteUserSchema(global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUserSchema, null, options, request);
      }
      /// <summary>
      /// Delete a user schema
      ///
      /// Delete an existing user schema. This operation is only allowed if there are no associated users to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse> DeleteUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUserSchemaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a user schema
      ///
      /// Delete an existing user schema. This operation is only allowed if there are no associated users to it.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse> DeleteUserSchemaAsync(global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUserSchema, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ZITADELUserSchemasClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ZITADELUserSchemasClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ZITADELUserSchemasBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SearchUserSchemas, serviceImpl.SearchUserSchemas)
          .AddMethod(__Method_GetUserSchema, serviceImpl.GetUserSchema)
          .AddMethod(__Method_CreateUserSchema, serviceImpl.CreateUserSchema)
          .AddMethod(__Method_PatchUserSchema, serviceImpl.PatchUserSchema)
          .AddMethod(__Method_DeactivateUserSchema, serviceImpl.DeactivateUserSchema)
          .AddMethod(__Method_ReactivateUserSchema, serviceImpl.ReactivateUserSchema)
          .AddMethod(__Method_DeleteUserSchema, serviceImpl.DeleteUserSchema).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ZITADELUserSchemasBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SearchUserSchemas, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasRequest, global::Zitadel.Resources.Userschema.V3alpha.SearchUserSchemasResponse>(serviceImpl.SearchUserSchemas));
      serviceBinder.AddMethod(__Method_GetUserSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.GetUserSchemaResponse>(serviceImpl.GetUserSchema));
      serviceBinder.AddMethod(__Method_CreateUserSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.CreateUserSchemaResponse>(serviceImpl.CreateUserSchema));
      serviceBinder.AddMethod(__Method_PatchUserSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.PatchUserSchemaResponse>(serviceImpl.PatchUserSchema));
      serviceBinder.AddMethod(__Method_DeactivateUserSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.DeactivateUserSchemaResponse>(serviceImpl.DeactivateUserSchema));
      serviceBinder.AddMethod(__Method_ReactivateUserSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.ReactivateUserSchemaResponse>(serviceImpl.ReactivateUserSchema));
      serviceBinder.AddMethod(__Method_DeleteUserSchema, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaRequest, global::Zitadel.Resources.Userschema.V3alpha.DeleteUserSchemaResponse>(serviceImpl.DeleteUserSchema));
    }

  }
}
#endregion
