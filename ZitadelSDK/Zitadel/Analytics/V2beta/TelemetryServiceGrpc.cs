// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/analytics/v2beta/telemetry_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Analytics.V2beta {
  /// <summary>
  /// The TelemetryService is used to report telemetry such as usage statistics of the ZITADEL instance(s).
  /// back to a central storage.
  /// It is used to collect anonymized data about the usage of ZITADEL features, capabilities, and configurations.
  /// ZITADEL acts as a client of the TelemetryService.
  ///
  /// Reports are sent periodically based on the system's runtime configuration.
  /// The content of the reports, respectively the data collected, can be configured in the system's runtime configuration.
  ///
  /// All endpoints follow the same error and retry handling:
  /// In case of a failure to report the usage, ZITADEL will retry to report the usage
  /// based on the configured retry policy and error type:
  /// - Client side errors will not be retried, as they indicate a misconfiguration or an invalid request:
  ///   - `INVALID_ARGUMENT`: The request was malformed.
  ///   - `NOT_FOUND`: The TelemetryService's endpoint is likely misconfigured.
  /// - Connection / transfer errors will be retried based on the retry policy configured in the system's runtime configuration:
  ///   - `DEADLINE_EXCEEDED`: The request took too long to complete, it will be retried.
  ///   - `RESOURCE_EXHAUSTED`: The request was rejected due to resource exhaustion, it will be retried after a backoff period.
  ///   - `UNAVAILABLE`: The TelemetryService is currently unavailable, it will be retried after a backoff period.
  /// Server side errors will also be retried based on the information provided by the server:
  /// - `FAILED_PRECONDITION`: The request failed due to a precondition, e.g. the report ID does not exists,
  ///    does not correspond to the same system ID or previous reporting is too old, do not retry.
  /// - `INTERNAL`: An internal error occurred. Check details and logs.
  /// </summary>
  public static partial class TelemetryService
  {
    static readonly string __ServiceName = "zitadel.analytics.v2beta.TelemetryService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest> __Marshaller_zitadel_analytics_v2beta_ReportBaseInformationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse> __Marshaller_zitadel_analytics_v2beta_ReportBaseInformationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest> __Marshaller_zitadel_analytics_v2beta_ReportResourceCountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse> __Marshaller_zitadel_analytics_v2beta_ReportResourceCountsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest, global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse> __Method_ReportBaseInformation = new grpc::Method<global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest, global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportBaseInformation",
        __Marshaller_zitadel_analytics_v2beta_ReportBaseInformationRequest,
        __Marshaller_zitadel_analytics_v2beta_ReportBaseInformationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest, global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse> __Method_ReportResourceCounts = new grpc::Method<global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest, global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReportResourceCounts",
        __Marshaller_zitadel_analytics_v2beta_ReportResourceCountsRequest,
        __Marshaller_zitadel_analytics_v2beta_ReportResourceCountsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Analytics.V2beta.TelemetryServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TelemetryService</summary>
    [grpc::BindServiceMethod(typeof(TelemetryService), "BindService")]
    public abstract partial class TelemetryServiceBase
    {
      /// <summary>
      /// ReportBaseInformation is used to report the base information of the ZITADEL system,
      /// including the version, instances, their creation date and domains.
      /// The response contains a report ID to link it to the resource counts or other reports.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse> ReportBaseInformation(global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ReportResourceCounts is used to report the resource counts such as amount of organizations
      /// or users per organization and much more.
      /// Since the resource counts can be reported in multiple batches,
      /// the response contains a report ID to continue reporting.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse> ReportResourceCounts(global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TelemetryService</summary>
    public partial class TelemetryServiceClient : grpc::ClientBase<TelemetryServiceClient>
    {
      /// <summary>Creates a new client for TelemetryService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TelemetryServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TelemetryService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TelemetryServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TelemetryServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TelemetryServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ReportBaseInformation is used to report the base information of the ZITADEL system,
      /// including the version, instances, their creation date and domains.
      /// The response contains a report ID to link it to the resource counts or other reports.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse ReportBaseInformation(global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportBaseInformation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReportBaseInformation is used to report the base information of the ZITADEL system,
      /// including the version, instances, their creation date and domains.
      /// The response contains a report ID to link it to the resource counts or other reports.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse ReportBaseInformation(global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportBaseInformation, null, options, request);
      }
      /// <summary>
      /// ReportBaseInformation is used to report the base information of the ZITADEL system,
      /// including the version, instances, their creation date and domains.
      /// The response contains a report ID to link it to the resource counts or other reports.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse> ReportBaseInformationAsync(global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportBaseInformationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReportBaseInformation is used to report the base information of the ZITADEL system,
      /// including the version, instances, their creation date and domains.
      /// The response contains a report ID to link it to the resource counts or other reports.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse> ReportBaseInformationAsync(global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportBaseInformation, null, options, request);
      }
      /// <summary>
      /// ReportResourceCounts is used to report the resource counts such as amount of organizations
      /// or users per organization and much more.
      /// Since the resource counts can be reported in multiple batches,
      /// the response contains a report ID to continue reporting.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse ReportResourceCounts(global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportResourceCounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReportResourceCounts is used to report the resource counts such as amount of organizations
      /// or users per organization and much more.
      /// Since the resource counts can be reported in multiple batches,
      /// the response contains a report ID to continue reporting.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse ReportResourceCounts(global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReportResourceCounts, null, options, request);
      }
      /// <summary>
      /// ReportResourceCounts is used to report the resource counts such as amount of organizations
      /// or users per organization and much more.
      /// Since the resource counts can be reported in multiple batches,
      /// the response contains a report ID to continue reporting.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse> ReportResourceCountsAsync(global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReportResourceCountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReportResourceCounts is used to report the resource counts such as amount of organizations
      /// or users per organization and much more.
      /// Since the resource counts can be reported in multiple batches,
      /// the response contains a report ID to continue reporting.
      /// The report ID is only valid for the same system ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse> ReportResourceCountsAsync(global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReportResourceCounts, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TelemetryServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TelemetryServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TelemetryServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReportBaseInformation, serviceImpl.ReportBaseInformation)
          .AddMethod(__Method_ReportResourceCounts, serviceImpl.ReportResourceCounts).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TelemetryServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReportBaseInformation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Analytics.V2beta.ReportBaseInformationRequest, global::Zitadel.Analytics.V2beta.ReportBaseInformationResponse>(serviceImpl.ReportBaseInformation));
      serviceBinder.AddMethod(__Method_ReportResourceCounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Analytics.V2beta.ReportResourceCountsRequest, global::Zitadel.Analytics.V2beta.ReportResourceCountsResponse>(serviceImpl.ReportResourceCounts));
    }

  }
}
#endregion
