// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/internal_permission/v2beta/internal_permission_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.InternalPermission.V2beta {
  /// <summary>
  /// InternalPermissionService provides methods to manage permissions for resource
  /// and their management in ZITADEL itself.
  ///
  /// If you want to manage permissions and roles within your project or application,
  /// please use the AuthorizationsService.
  /// </summary>
  public static partial class InternalPermissionService
  {
    static readonly string __ServiceName = "zitadel.internal_permission.v2beta.InternalPermissionService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest> __Marshaller_zitadel_internal_permission_v2beta_ListAdministratorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse> __Marshaller_zitadel_internal_permission_v2beta_ListAdministratorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest> __Marshaller_zitadel_internal_permission_v2beta_CreateAdministratorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse> __Marshaller_zitadel_internal_permission_v2beta_CreateAdministratorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest> __Marshaller_zitadel_internal_permission_v2beta_UpdateAdministratorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse> __Marshaller_zitadel_internal_permission_v2beta_UpdateAdministratorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest> __Marshaller_zitadel_internal_permission_v2beta_DeleteAdministratorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse> __Marshaller_zitadel_internal_permission_v2beta_DeleteAdministratorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest, global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse> __Method_ListAdministrators = new grpc::Method<global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest, global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAdministrators",
        __Marshaller_zitadel_internal_permission_v2beta_ListAdministratorsRequest,
        __Marshaller_zitadel_internal_permission_v2beta_ListAdministratorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest, global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse> __Method_CreateAdministrator = new grpc::Method<global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest, global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAdministrator",
        __Marshaller_zitadel_internal_permission_v2beta_CreateAdministratorRequest,
        __Marshaller_zitadel_internal_permission_v2beta_CreateAdministratorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest, global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse> __Method_UpdateAdministrator = new grpc::Method<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest, global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAdministrator",
        __Marshaller_zitadel_internal_permission_v2beta_UpdateAdministratorRequest,
        __Marshaller_zitadel_internal_permission_v2beta_UpdateAdministratorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest, global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse> __Method_DeleteAdministrator = new grpc::Method<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest, global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAdministrator",
        __Marshaller_zitadel_internal_permission_v2beta_DeleteAdministratorRequest,
        __Marshaller_zitadel_internal_permission_v2beta_DeleteAdministratorResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.InternalPermission.V2beta.InternalPermissionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InternalPermissionService</summary>
    [grpc::BindServiceMethod(typeof(InternalPermissionService), "BindService")]
    public abstract partial class InternalPermissionServiceBase
    {
      /// <summary>
      /// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.read" for instance administrators
      ///   - "org.member.read" for organization administrators
      ///   - "project.member.read" for project administrators
      ///   - "project.grant.member.read" for project grant administrators
      ///   - no permissions required for listing own administrator roles
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse> ListAdministrators(global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateAdministrator grants a administrator role to a user for a specific resource.
      ///
      /// Note that the roles are specific to the resource type.
      /// This means that if you want to grant a user the administrator role for an organization and a project,
      /// you need to create two administrator roles.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse> CreateAdministrator(global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateAdministrator updates the specific administrator role.
      ///
      /// Note that any role previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse> UpdateAdministrator(global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteAdministrator revokes a administrator role from a user.
      ///
      /// In case the administrator role is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.delete" for instance administrators
      ///   - "org.member.delete" for organization administrators
      ///   - "project.member.delete" for project administrators
      ///   - "project.grant.member.delete" for project grant administrators
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse> DeleteAdministrator(global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InternalPermissionService</summary>
    public partial class InternalPermissionServiceClient : grpc::ClientBase<InternalPermissionServiceClient>
    {
      /// <summary>Creates a new client for InternalPermissionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InternalPermissionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InternalPermissionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InternalPermissionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InternalPermissionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InternalPermissionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.read" for instance administrators
      ///   - "org.member.read" for organization administrators
      ///   - "project.member.read" for project administrators
      ///   - "project.grant.member.read" for project grant administrators
      ///   - no permissions required for listing own administrator roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse ListAdministrators(global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAdministrators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.read" for instance administrators
      ///   - "org.member.read" for organization administrators
      ///   - "project.member.read" for project administrators
      ///   - "project.grant.member.read" for project grant administrators
      ///   - no permissions required for listing own administrator roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse ListAdministrators(global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAdministrators, null, options, request);
      }
      /// <summary>
      /// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.read" for instance administrators
      ///   - "org.member.read" for organization administrators
      ///   - "project.member.read" for project administrators
      ///   - "project.grant.member.read" for project grant administrators
      ///   - no permissions required for listing own administrator roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse> ListAdministratorsAsync(global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAdministratorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListAdministrators returns all administrators and its roles matching the request and necessary permissions.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.read" for instance administrators
      ///   - "org.member.read" for organization administrators
      ///   - "project.member.read" for project administrators
      ///   - "project.grant.member.read" for project grant administrators
      ///   - no permissions required for listing own administrator roles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse> ListAdministratorsAsync(global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAdministrators, null, options, request);
      }
      /// <summary>
      /// CreateAdministrator grants a administrator role to a user for a specific resource.
      ///
      /// Note that the roles are specific to the resource type.
      /// This means that if you want to grant a user the administrator role for an organization and a project,
      /// you need to create two administrator roles.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse CreateAdministrator(global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAdministrator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateAdministrator grants a administrator role to a user for a specific resource.
      ///
      /// Note that the roles are specific to the resource type.
      /// This means that if you want to grant a user the administrator role for an organization and a project,
      /// you need to create two administrator roles.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse CreateAdministrator(global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAdministrator, null, options, request);
      }
      /// <summary>
      /// CreateAdministrator grants a administrator role to a user for a specific resource.
      ///
      /// Note that the roles are specific to the resource type.
      /// This means that if you want to grant a user the administrator role for an organization and a project,
      /// you need to create two administrator roles.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse> CreateAdministratorAsync(global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAdministratorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateAdministrator grants a administrator role to a user for a specific resource.
      ///
      /// Note that the roles are specific to the resource type.
      /// This means that if you want to grant a user the administrator role for an organization and a project,
      /// you need to create two administrator roles.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse> CreateAdministratorAsync(global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAdministrator, null, options, request);
      }
      /// <summary>
      /// UpdateAdministrator updates the specific administrator role.
      ///
      /// Note that any role previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse UpdateAdministrator(global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAdministrator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateAdministrator updates the specific administrator role.
      ///
      /// Note that any role previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse UpdateAdministrator(global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAdministrator, null, options, request);
      }
      /// <summary>
      /// UpdateAdministrator updates the specific administrator role.
      ///
      /// Note that any role previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse> UpdateAdministratorAsync(global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAdministratorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateAdministrator updates the specific administrator role.
      ///
      /// Note that any role previously granted to the user and not present in the request will be revoked.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.write" for instance administrators
      ///   - "org.member.write" for organization administrators
      ///   - "project.member.write" for project administrators
      ///   - "project.grant.member.write" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse> UpdateAdministratorAsync(global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAdministrator, null, options, request);
      }
      /// <summary>
      /// DeleteAdministrator revokes a administrator role from a user.
      ///
      /// In case the administrator role is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.delete" for instance administrators
      ///   - "org.member.delete" for organization administrators
      ///   - "project.member.delete" for project administrators
      ///   - "project.grant.member.delete" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse DeleteAdministrator(global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAdministrator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAdministrator revokes a administrator role from a user.
      ///
      /// In case the administrator role is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.delete" for instance administrators
      ///   - "org.member.delete" for organization administrators
      ///   - "project.member.delete" for project administrators
      ///   - "project.grant.member.delete" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse DeleteAdministrator(global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAdministrator, null, options, request);
      }
      /// <summary>
      /// DeleteAdministrator revokes a administrator role from a user.
      ///
      /// In case the administrator role is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.delete" for instance administrators
      ///   - "org.member.delete" for organization administrators
      ///   - "project.member.delete" for project administrators
      ///   - "project.grant.member.delete" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse> DeleteAdministratorAsync(global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAdministratorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteAdministrator revokes a administrator role from a user.
      ///
      /// In case the administrator role is not found, the request will return a successful response as
      /// the desired state is already achieved.
      /// You can check the deletion date in the response to verify if the administrator role was deleted during the request.
      ///
      /// Required permissions depend on the resource type:
      ///   - "iam.member.delete" for instance administrators
      ///   - "org.member.delete" for organization administrators
      ///   - "project.member.delete" for project administrators
      ///   - "project.grant.member.delete" for project grant administrators
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse> DeleteAdministratorAsync(global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAdministrator, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InternalPermissionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InternalPermissionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(InternalPermissionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ListAdministrators, serviceImpl.ListAdministrators)
          .AddMethod(__Method_CreateAdministrator, serviceImpl.CreateAdministrator)
          .AddMethod(__Method_UpdateAdministrator, serviceImpl.UpdateAdministrator)
          .AddMethod(__Method_DeleteAdministrator, serviceImpl.DeleteAdministrator).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InternalPermissionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ListAdministrators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.InternalPermission.V2beta.ListAdministratorsRequest, global::Zitadel.InternalPermission.V2beta.ListAdministratorsResponse>(serviceImpl.ListAdministrators));
      serviceBinder.AddMethod(__Method_CreateAdministrator, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.InternalPermission.V2beta.CreateAdministratorRequest, global::Zitadel.InternalPermission.V2beta.CreateAdministratorResponse>(serviceImpl.CreateAdministrator));
      serviceBinder.AddMethod(__Method_UpdateAdministrator, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.InternalPermission.V2beta.UpdateAdministratorRequest, global::Zitadel.InternalPermission.V2beta.UpdateAdministratorResponse>(serviceImpl.UpdateAdministrator));
      serviceBinder.AddMethod(__Method_DeleteAdministrator, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.InternalPermission.V2beta.DeleteAdministratorRequest, global::Zitadel.InternalPermission.V2beta.DeleteAdministratorResponse>(serviceImpl.DeleteAdministrator));
    }

  }
}
#endregion
