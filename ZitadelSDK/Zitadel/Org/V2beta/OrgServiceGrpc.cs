// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/org/v2beta/org_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Org.V2beta {
  public static partial class OrganizationService
  {
    static readonly string __ServiceName = "zitadel.org.v2beta.OrganizationService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.CreateOrganizationRequest> __Marshaller_zitadel_org_v2beta_CreateOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.CreateOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.CreateOrganizationResponse> __Marshaller_zitadel_org_v2beta_CreateOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.CreateOrganizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.UpdateOrganizationRequest> __Marshaller_zitadel_org_v2beta_UpdateOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.UpdateOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.UpdateOrganizationResponse> __Marshaller_zitadel_org_v2beta_UpdateOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.UpdateOrganizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ListOrganizationsRequest> __Marshaller_zitadel_org_v2beta_ListOrganizationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ListOrganizationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ListOrganizationsResponse> __Marshaller_zitadel_org_v2beta_ListOrganizationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ListOrganizationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeleteOrganizationRequest> __Marshaller_zitadel_org_v2beta_DeleteOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeleteOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeleteOrganizationResponse> __Marshaller_zitadel_org_v2beta_DeleteOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeleteOrganizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest> __Marshaller_zitadel_org_v2beta_SetOrganizationMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse> __Marshaller_zitadel_org_v2beta_SetOrganizationMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest> __Marshaller_zitadel_org_v2beta_ListOrganizationMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse> __Marshaller_zitadel_org_v2beta_ListOrganizationMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest> __Marshaller_zitadel_org_v2beta_DeleteOrganizationMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse> __Marshaller_zitadel_org_v2beta_DeleteOrganizationMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.AddOrganizationDomainRequest> __Marshaller_zitadel_org_v2beta_AddOrganizationDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.AddOrganizationDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.AddOrganizationDomainResponse> __Marshaller_zitadel_org_v2beta_AddOrganizationDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.AddOrganizationDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest> __Marshaller_zitadel_org_v2beta_ListOrganizationDomainsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse> __Marshaller_zitadel_org_v2beta_ListOrganizationDomainsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest> __Marshaller_zitadel_org_v2beta_DeleteOrganizationDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse> __Marshaller_zitadel_org_v2beta_DeleteOrganizationDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest> __Marshaller_zitadel_org_v2beta_GenerateOrganizationDomainValidationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse> __Marshaller_zitadel_org_v2beta_GenerateOrganizationDomainValidationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest> __Marshaller_zitadel_org_v2beta_VerifyOrganizationDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse> __Marshaller_zitadel_org_v2beta_VerifyOrganizationDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeactivateOrganizationRequest> __Marshaller_zitadel_org_v2beta_DeactivateOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeactivateOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.DeactivateOrganizationResponse> __Marshaller_zitadel_org_v2beta_DeactivateOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.DeactivateOrganizationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ActivateOrganizationRequest> __Marshaller_zitadel_org_v2beta_ActivateOrganizationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ActivateOrganizationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Org.V2beta.ActivateOrganizationResponse> __Marshaller_zitadel_org_v2beta_ActivateOrganizationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Org.V2beta.ActivateOrganizationResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.CreateOrganizationRequest, global::Zitadel.Org.V2beta.CreateOrganizationResponse> __Method_CreateOrganization = new grpc::Method<global::Zitadel.Org.V2beta.CreateOrganizationRequest, global::Zitadel.Org.V2beta.CreateOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrganization",
        __Marshaller_zitadel_org_v2beta_CreateOrganizationRequest,
        __Marshaller_zitadel_org_v2beta_CreateOrganizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.UpdateOrganizationRequest, global::Zitadel.Org.V2beta.UpdateOrganizationResponse> __Method_UpdateOrganization = new grpc::Method<global::Zitadel.Org.V2beta.UpdateOrganizationRequest, global::Zitadel.Org.V2beta.UpdateOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrganization",
        __Marshaller_zitadel_org_v2beta_UpdateOrganizationRequest,
        __Marshaller_zitadel_org_v2beta_UpdateOrganizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.ListOrganizationsRequest, global::Zitadel.Org.V2beta.ListOrganizationsResponse> __Method_ListOrganizations = new grpc::Method<global::Zitadel.Org.V2beta.ListOrganizationsRequest, global::Zitadel.Org.V2beta.ListOrganizationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizations",
        __Marshaller_zitadel_org_v2beta_ListOrganizationsRequest,
        __Marshaller_zitadel_org_v2beta_ListOrganizationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.DeleteOrganizationRequest, global::Zitadel.Org.V2beta.DeleteOrganizationResponse> __Method_DeleteOrganization = new grpc::Method<global::Zitadel.Org.V2beta.DeleteOrganizationRequest, global::Zitadel.Org.V2beta.DeleteOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganization",
        __Marshaller_zitadel_org_v2beta_DeleteOrganizationRequest,
        __Marshaller_zitadel_org_v2beta_DeleteOrganizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest, global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse> __Method_SetOrganizationMetadata = new grpc::Method<global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest, global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetOrganizationMetadata",
        __Marshaller_zitadel_org_v2beta_SetOrganizationMetadataRequest,
        __Marshaller_zitadel_org_v2beta_SetOrganizationMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest, global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse> __Method_ListOrganizationMetadata = new grpc::Method<global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest, global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizationMetadata",
        __Marshaller_zitadel_org_v2beta_ListOrganizationMetadataRequest,
        __Marshaller_zitadel_org_v2beta_ListOrganizationMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest, global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse> __Method_DeleteOrganizationMetadata = new grpc::Method<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest, global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganizationMetadata",
        __Marshaller_zitadel_org_v2beta_DeleteOrganizationMetadataRequest,
        __Marshaller_zitadel_org_v2beta_DeleteOrganizationMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.AddOrganizationDomainRequest, global::Zitadel.Org.V2beta.AddOrganizationDomainResponse> __Method_AddOrganizationDomain = new grpc::Method<global::Zitadel.Org.V2beta.AddOrganizationDomainRequest, global::Zitadel.Org.V2beta.AddOrganizationDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddOrganizationDomain",
        __Marshaller_zitadel_org_v2beta_AddOrganizationDomainRequest,
        __Marshaller_zitadel_org_v2beta_AddOrganizationDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest, global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse> __Method_ListOrganizationDomains = new grpc::Method<global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest, global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOrganizationDomains",
        __Marshaller_zitadel_org_v2beta_ListOrganizationDomainsRequest,
        __Marshaller_zitadel_org_v2beta_ListOrganizationDomainsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest, global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse> __Method_DeleteOrganizationDomain = new grpc::Method<global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest, global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganizationDomain",
        __Marshaller_zitadel_org_v2beta_DeleteOrganizationDomainRequest,
        __Marshaller_zitadel_org_v2beta_DeleteOrganizationDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest, global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse> __Method_GenerateOrganizationDomainValidation = new grpc::Method<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest, global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateOrganizationDomainValidation",
        __Marshaller_zitadel_org_v2beta_GenerateOrganizationDomainValidationRequest,
        __Marshaller_zitadel_org_v2beta_GenerateOrganizationDomainValidationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest, global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse> __Method_VerifyOrganizationDomain = new grpc::Method<global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest, global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyOrganizationDomain",
        __Marshaller_zitadel_org_v2beta_VerifyOrganizationDomainRequest,
        __Marshaller_zitadel_org_v2beta_VerifyOrganizationDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.DeactivateOrganizationRequest, global::Zitadel.Org.V2beta.DeactivateOrganizationResponse> __Method_DeactivateOrganization = new grpc::Method<global::Zitadel.Org.V2beta.DeactivateOrganizationRequest, global::Zitadel.Org.V2beta.DeactivateOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateOrganization",
        __Marshaller_zitadel_org_v2beta_DeactivateOrganizationRequest,
        __Marshaller_zitadel_org_v2beta_DeactivateOrganizationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Org.V2beta.ActivateOrganizationRequest, global::Zitadel.Org.V2beta.ActivateOrganizationResponse> __Method_ActivateOrganization = new grpc::Method<global::Zitadel.Org.V2beta.ActivateOrganizationRequest, global::Zitadel.Org.V2beta.ActivateOrganizationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ActivateOrganization",
        __Marshaller_zitadel_org_v2beta_ActivateOrganizationRequest,
        __Marshaller_zitadel_org_v2beta_ActivateOrganizationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Org.V2beta.OrgServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OrganizationService</summary>
    [grpc::BindServiceMethod(typeof(OrganizationService), "BindService")]
    public abstract partial class OrganizationServiceBase
    {
      /// <summary>
      /// Create Organization
      ///
      /// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      ///
      /// Required permission:
      ///  - `org.create`
      ///
      /// Deprecated: Use [AddOrganization](/apis/resources/org_service_v2/organization-service-add-organization.api.mdx) instead to create an organization.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.CreateOrganizationResponse> CreateOrganization(global::Zitadel.Org.V2beta.CreateOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Organization
      ///
      /// Change the name of the organization.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.UpdateOrganizationResponse> UpdateOrganization(global::Zitadel.Org.V2beta.UpdateOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Organizations
      ///
      /// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
      ///
      /// Required permission:
      ///  - `iam.read`
      ///
      /// Deprecated: Use [ListOrganizations](/apis/resources/org_service_v2/organization-service-list-organizations.api.mdx) instead to list organizations.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.ListOrganizationsResponse> ListOrganizations(global::Zitadel.Org.V2beta.ListOrganizationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Organization
      ///
      /// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.delete`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.DeleteOrganizationResponse> DeleteOrganization(global::Zitadel.Org.V2beta.DeleteOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set Organization Metadata
      ///
      /// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse> SetOrganizationMetadata(global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Organization Metadata
      ///
      /// List metadata of an organization filtered by query.
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse> ListOrganizationMetadata(global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Organization Metadata
      ///
      /// Delete metadata objects from an organization with a specific key.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse> DeleteOrganizationMetadata(global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add Organization Domain
      ///
      /// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.AddOrganizationDomainResponse> AddOrganizationDomain(global::Zitadel.Org.V2beta.AddOrganizationDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Organization Domains
      ///
      /// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse> ListOrganizationDomains(global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Organization Domain
      ///
      /// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse> DeleteOrganizationDomain(global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Generate Organization Domain Validation
      ///
      /// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse> GenerateOrganizationDomainValidation(global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Verify Organization Domain
      ///
      /// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse> VerifyOrganizationDomain(global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate Organization
      ///
      /// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.DeactivateOrganizationResponse> DeactivateOrganization(global::Zitadel.Org.V2beta.DeactivateOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Activate Organization
      ///
      /// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Org.V2beta.ActivateOrganizationResponse> ActivateOrganization(global::Zitadel.Org.V2beta.ActivateOrganizationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OrganizationService</summary>
    public partial class OrganizationServiceClient : grpc::ClientBase<OrganizationServiceClient>
    {
      /// <summary>Creates a new client for OrganizationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OrganizationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrganizationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OrganizationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OrganizationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OrganizationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create Organization
      ///
      /// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      ///
      /// Required permission:
      ///  - `org.create`
      ///
      /// Deprecated: Use [AddOrganization](/apis/resources/org_service_v2/organization-service-add-organization.api.mdx) instead to create an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.CreateOrganizationResponse CreateOrganization(global::Zitadel.Org.V2beta.CreateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Organization
      ///
      /// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      ///
      /// Required permission:
      ///  - `org.create`
      ///
      /// Deprecated: Use [AddOrganization](/apis/resources/org_service_v2/organization-service-add-organization.api.mdx) instead to create an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.CreateOrganizationResponse CreateOrganization(global::Zitadel.Org.V2beta.CreateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrganization, null, options, request);
      }
      /// <summary>
      /// Create Organization
      ///
      /// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      ///
      /// Required permission:
      ///  - `org.create`
      ///
      /// Deprecated: Use [AddOrganization](/apis/resources/org_service_v2/organization-service-add-organization.api.mdx) instead to create an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.CreateOrganizationResponse> CreateOrganizationAsync(global::Zitadel.Org.V2beta.CreateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Organization
      ///
      /// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
      ///
      /// Required permission:
      ///  - `org.create`
      ///
      /// Deprecated: Use [AddOrganization](/apis/resources/org_service_v2/organization-service-add-organization.api.mdx) instead to create an organization.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.CreateOrganizationResponse> CreateOrganizationAsync(global::Zitadel.Org.V2beta.CreateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrganization, null, options, request);
      }
      /// <summary>
      /// Update Organization
      ///
      /// Change the name of the organization.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.UpdateOrganizationResponse UpdateOrganization(global::Zitadel.Org.V2beta.UpdateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Organization
      ///
      /// Change the name of the organization.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.UpdateOrganizationResponse UpdateOrganization(global::Zitadel.Org.V2beta.UpdateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrganization, null, options, request);
      }
      /// <summary>
      /// Update Organization
      ///
      /// Change the name of the organization.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.UpdateOrganizationResponse> UpdateOrganizationAsync(global::Zitadel.Org.V2beta.UpdateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Organization
      ///
      /// Change the name of the organization.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.UpdateOrganizationResponse> UpdateOrganizationAsync(global::Zitadel.Org.V2beta.UpdateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrganization, null, options, request);
      }
      /// <summary>
      /// List Organizations
      ///
      /// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
      ///
      /// Required permission:
      ///  - `iam.read`
      ///
      /// Deprecated: Use [ListOrganizations](/apis/resources/org_service_v2/organization-service-list-organizations.api.mdx) instead to list organizations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ListOrganizationsResponse ListOrganizations(global::Zitadel.Org.V2beta.ListOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizations(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Organizations
      ///
      /// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
      ///
      /// Required permission:
      ///  - `iam.read`
      ///
      /// Deprecated: Use [ListOrganizations](/apis/resources/org_service_v2/organization-service-list-organizations.api.mdx) instead to list organizations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ListOrganizationsResponse ListOrganizations(global::Zitadel.Org.V2beta.ListOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizations, null, options, request);
      }
      /// <summary>
      /// List Organizations
      ///
      /// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
      ///
      /// Required permission:
      ///  - `iam.read`
      ///
      /// Deprecated: Use [ListOrganizations](/apis/resources/org_service_v2/organization-service-list-organizations.api.mdx) instead to list organizations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ListOrganizationsResponse> ListOrganizationsAsync(global::Zitadel.Org.V2beta.ListOrganizationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Organizations
      ///
      /// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
      ///
      /// Required permission:
      ///  - `iam.read`
      ///
      /// Deprecated: Use [ListOrganizations](/apis/resources/org_service_v2/organization-service-list-organizations.api.mdx) instead to list organizations.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ListOrganizationsResponse> ListOrganizationsAsync(global::Zitadel.Org.V2beta.ListOrganizationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizations, null, options, request);
      }
      /// <summary>
      /// Delete Organization
      ///
      /// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeleteOrganizationResponse DeleteOrganization(global::Zitadel.Org.V2beta.DeleteOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Organization
      ///
      /// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeleteOrganizationResponse DeleteOrganization(global::Zitadel.Org.V2beta.DeleteOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganization, null, options, request);
      }
      /// <summary>
      /// Delete Organization
      ///
      /// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeleteOrganizationResponse> DeleteOrganizationAsync(global::Zitadel.Org.V2beta.DeleteOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Organization
      ///
      /// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.delete`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeleteOrganizationResponse> DeleteOrganizationAsync(global::Zitadel.Org.V2beta.DeleteOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganization, null, options, request);
      }
      /// <summary>
      /// Set Organization Metadata
      ///
      /// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse SetOrganizationMetadata(global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetOrganizationMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set Organization Metadata
      ///
      /// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse SetOrganizationMetadata(global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetOrganizationMetadata, null, options, request);
      }
      /// <summary>
      /// Set Organization Metadata
      ///
      /// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse> SetOrganizationMetadataAsync(global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetOrganizationMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set Organization Metadata
      ///
      /// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse> SetOrganizationMetadataAsync(global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetOrganizationMetadata, null, options, request);
      }
      /// <summary>
      /// List Organization Metadata
      ///
      /// List metadata of an organization filtered by query.
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse ListOrganizationMetadata(global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Organization Metadata
      ///
      /// List metadata of an organization filtered by query.
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse ListOrganizationMetadata(global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizationMetadata, null, options, request);
      }
      /// <summary>
      /// List Organization Metadata
      ///
      /// List metadata of an organization filtered by query.
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse> ListOrganizationMetadataAsync(global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Organization Metadata
      ///
      /// List metadata of an organization filtered by query.
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse> ListOrganizationMetadataAsync(global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizationMetadata, null, options, request);
      }
      /// <summary>
      /// Delete Organization Metadata
      ///
      /// Delete metadata objects from an organization with a specific key.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse DeleteOrganizationMetadata(global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Organization Metadata
      ///
      /// Delete metadata objects from an organization with a specific key.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse DeleteOrganizationMetadata(global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganizationMetadata, null, options, request);
      }
      /// <summary>
      /// Delete Organization Metadata
      ///
      /// Delete metadata objects from an organization with a specific key.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse> DeleteOrganizationMetadataAsync(global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Organization Metadata
      ///
      /// Delete metadata objects from an organization with a specific key.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse> DeleteOrganizationMetadataAsync(global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganizationMetadata, null, options, request);
      }
      /// <summary>
      /// Add Organization Domain
      ///
      /// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.AddOrganizationDomainResponse AddOrganizationDomain(global::Zitadel.Org.V2beta.AddOrganizationDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddOrganizationDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Organization Domain
      ///
      /// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.AddOrganizationDomainResponse AddOrganizationDomain(global::Zitadel.Org.V2beta.AddOrganizationDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddOrganizationDomain, null, options, request);
      }
      /// <summary>
      /// Add Organization Domain
      ///
      /// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.AddOrganizationDomainResponse> AddOrganizationDomainAsync(global::Zitadel.Org.V2beta.AddOrganizationDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddOrganizationDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add Organization Domain
      ///
      /// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.AddOrganizationDomainResponse> AddOrganizationDomainAsync(global::Zitadel.Org.V2beta.AddOrganizationDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddOrganizationDomain, null, options, request);
      }
      /// <summary>
      /// List Organization Domains
      ///
      /// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse ListOrganizationDomains(global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationDomains(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Organization Domains
      ///
      /// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse ListOrganizationDomains(global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOrganizationDomains, null, options, request);
      }
      /// <summary>
      /// List Organization Domains
      ///
      /// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse> ListOrganizationDomainsAsync(global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOrganizationDomainsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Organization Domains
      ///
      /// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs. 
      ///
      /// Required permission:
      ///  - `org.read`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse> ListOrganizationDomainsAsync(global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOrganizationDomains, null, options, request);
      }
      /// <summary>
      /// Delete Organization Domain
      ///
      /// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse DeleteOrganizationDomain(global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Organization Domain
      ///
      /// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse DeleteOrganizationDomain(global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganizationDomain, null, options, request);
      }
      /// <summary>
      /// Delete Organization Domain
      ///
      /// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse> DeleteOrganizationDomainAsync(global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Organization Domain
      ///
      /// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse> DeleteOrganizationDomainAsync(global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganizationDomain, null, options, request);
      }
      /// <summary>
      /// Generate Organization Domain Validation
      ///
      /// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse GenerateOrganizationDomainValidation(global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateOrganizationDomainValidation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate Organization Domain Validation
      ///
      /// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse GenerateOrganizationDomainValidation(global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateOrganizationDomainValidation, null, options, request);
      }
      /// <summary>
      /// Generate Organization Domain Validation
      ///
      /// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse> GenerateOrganizationDomainValidationAsync(global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GenerateOrganizationDomainValidationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Generate Organization Domain Validation
      ///
      /// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse> GenerateOrganizationDomainValidationAsync(global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateOrganizationDomainValidation, null, options, request);
      }
      /// <summary>
      /// Verify Organization Domain
      ///
      /// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse VerifyOrganizationDomain(global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyOrganizationDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify Organization Domain
      ///
      /// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse VerifyOrganizationDomain(global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyOrganizationDomain, null, options, request);
      }
      /// <summary>
      /// Verify Organization Domain
      ///
      /// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse> VerifyOrganizationDomainAsync(global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyOrganizationDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Verify Organization Domain
      ///
      /// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse> VerifyOrganizationDomainAsync(global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyOrganizationDomain, null, options, request);
      }
      /// <summary>
      /// Deactivate Organization
      ///
      /// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeactivateOrganizationResponse DeactivateOrganization(global::Zitadel.Org.V2beta.DeactivateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Organization
      ///
      /// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.DeactivateOrganizationResponse DeactivateOrganization(global::Zitadel.Org.V2beta.DeactivateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateOrganization, null, options, request);
      }
      /// <summary>
      /// Deactivate Organization
      ///
      /// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeactivateOrganizationResponse> DeactivateOrganizationAsync(global::Zitadel.Org.V2beta.DeactivateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Organization
      ///
      /// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.DeactivateOrganizationResponse> DeactivateOrganizationAsync(global::Zitadel.Org.V2beta.DeactivateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateOrganization, null, options, request);
      }
      /// <summary>
      /// Activate Organization
      ///
      /// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ActivateOrganizationResponse ActivateOrganization(global::Zitadel.Org.V2beta.ActivateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Organization
      ///
      /// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Org.V2beta.ActivateOrganizationResponse ActivateOrganization(global::Zitadel.Org.V2beta.ActivateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ActivateOrganization, null, options, request);
      }
      /// <summary>
      /// Activate Organization
      ///
      /// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ActivateOrganizationResponse> ActivateOrganizationAsync(global::Zitadel.Org.V2beta.ActivateOrganizationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ActivateOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Activate Organization
      ///
      /// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
      ///
      /// Required permission:
      ///  - `org.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Org.V2beta.ActivateOrganizationResponse> ActivateOrganizationAsync(global::Zitadel.Org.V2beta.ActivateOrganizationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ActivateOrganization, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OrganizationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrganizationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(OrganizationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateOrganization, serviceImpl.CreateOrganization)
          .AddMethod(__Method_UpdateOrganization, serviceImpl.UpdateOrganization)
          .AddMethod(__Method_ListOrganizations, serviceImpl.ListOrganizations)
          .AddMethod(__Method_DeleteOrganization, serviceImpl.DeleteOrganization)
          .AddMethod(__Method_SetOrganizationMetadata, serviceImpl.SetOrganizationMetadata)
          .AddMethod(__Method_ListOrganizationMetadata, serviceImpl.ListOrganizationMetadata)
          .AddMethod(__Method_DeleteOrganizationMetadata, serviceImpl.DeleteOrganizationMetadata)
          .AddMethod(__Method_AddOrganizationDomain, serviceImpl.AddOrganizationDomain)
          .AddMethod(__Method_ListOrganizationDomains, serviceImpl.ListOrganizationDomains)
          .AddMethod(__Method_DeleteOrganizationDomain, serviceImpl.DeleteOrganizationDomain)
          .AddMethod(__Method_GenerateOrganizationDomainValidation, serviceImpl.GenerateOrganizationDomainValidation)
          .AddMethod(__Method_VerifyOrganizationDomain, serviceImpl.VerifyOrganizationDomain)
          .AddMethod(__Method_DeactivateOrganization, serviceImpl.DeactivateOrganization)
          .AddMethod(__Method_ActivateOrganization, serviceImpl.ActivateOrganization).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OrganizationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.CreateOrganizationRequest, global::Zitadel.Org.V2beta.CreateOrganizationResponse>(serviceImpl.CreateOrganization));
      serviceBinder.AddMethod(__Method_UpdateOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.UpdateOrganizationRequest, global::Zitadel.Org.V2beta.UpdateOrganizationResponse>(serviceImpl.UpdateOrganization));
      serviceBinder.AddMethod(__Method_ListOrganizations, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.ListOrganizationsRequest, global::Zitadel.Org.V2beta.ListOrganizationsResponse>(serviceImpl.ListOrganizations));
      serviceBinder.AddMethod(__Method_DeleteOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.DeleteOrganizationRequest, global::Zitadel.Org.V2beta.DeleteOrganizationResponse>(serviceImpl.DeleteOrganization));
      serviceBinder.AddMethod(__Method_SetOrganizationMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.SetOrganizationMetadataRequest, global::Zitadel.Org.V2beta.SetOrganizationMetadataResponse>(serviceImpl.SetOrganizationMetadata));
      serviceBinder.AddMethod(__Method_ListOrganizationMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.ListOrganizationMetadataRequest, global::Zitadel.Org.V2beta.ListOrganizationMetadataResponse>(serviceImpl.ListOrganizationMetadata));
      serviceBinder.AddMethod(__Method_DeleteOrganizationMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.DeleteOrganizationMetadataRequest, global::Zitadel.Org.V2beta.DeleteOrganizationMetadataResponse>(serviceImpl.DeleteOrganizationMetadata));
      serviceBinder.AddMethod(__Method_AddOrganizationDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.AddOrganizationDomainRequest, global::Zitadel.Org.V2beta.AddOrganizationDomainResponse>(serviceImpl.AddOrganizationDomain));
      serviceBinder.AddMethod(__Method_ListOrganizationDomains, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.ListOrganizationDomainsRequest, global::Zitadel.Org.V2beta.ListOrganizationDomainsResponse>(serviceImpl.ListOrganizationDomains));
      serviceBinder.AddMethod(__Method_DeleteOrganizationDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.DeleteOrganizationDomainRequest, global::Zitadel.Org.V2beta.DeleteOrganizationDomainResponse>(serviceImpl.DeleteOrganizationDomain));
      serviceBinder.AddMethod(__Method_GenerateOrganizationDomainValidation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationRequest, global::Zitadel.Org.V2beta.GenerateOrganizationDomainValidationResponse>(serviceImpl.GenerateOrganizationDomainValidation));
      serviceBinder.AddMethod(__Method_VerifyOrganizationDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.VerifyOrganizationDomainRequest, global::Zitadel.Org.V2beta.VerifyOrganizationDomainResponse>(serviceImpl.VerifyOrganizationDomain));
      serviceBinder.AddMethod(__Method_DeactivateOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.DeactivateOrganizationRequest, global::Zitadel.Org.V2beta.DeactivateOrganizationResponse>(serviceImpl.DeactivateOrganization));
      serviceBinder.AddMethod(__Method_ActivateOrganization, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Org.V2beta.ActivateOrganizationRequest, global::Zitadel.Org.V2beta.ActivateOrganizationResponse>(serviceImpl.ActivateOrganization));
    }

  }
}
#endregion
