// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/action/v2/action_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.Action.V2 {
  /// <summary>
  /// Service to manage custom executions.
  /// The service provides methods to create, update, delete and list targets and executions.
  /// </summary>
  public static partial class ActionService
  {
    static readonly string __ServiceName = "zitadel.action.v2.ActionService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.CreateTargetRequest> __Marshaller_zitadel_action_v2_CreateTargetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.CreateTargetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.CreateTargetResponse> __Marshaller_zitadel_action_v2_CreateTargetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.CreateTargetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.UpdateTargetRequest> __Marshaller_zitadel_action_v2_UpdateTargetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.UpdateTargetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.UpdateTargetResponse> __Marshaller_zitadel_action_v2_UpdateTargetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.UpdateTargetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.DeleteTargetRequest> __Marshaller_zitadel_action_v2_DeleteTargetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.DeleteTargetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.DeleteTargetResponse> __Marshaller_zitadel_action_v2_DeleteTargetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.DeleteTargetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.GetTargetRequest> __Marshaller_zitadel_action_v2_GetTargetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.GetTargetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.GetTargetResponse> __Marshaller_zitadel_action_v2_GetTargetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.GetTargetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListTargetsRequest> __Marshaller_zitadel_action_v2_ListTargetsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListTargetsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListTargetsResponse> __Marshaller_zitadel_action_v2_ListTargetsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListTargetsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.SetExecutionRequest> __Marshaller_zitadel_action_v2_SetExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.SetExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.SetExecutionResponse> __Marshaller_zitadel_action_v2_SetExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.SetExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionsRequest> __Marshaller_zitadel_action_v2_ListExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionsResponse> __Marshaller_zitadel_action_v2_ListExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionFunctionsRequest> __Marshaller_zitadel_action_v2_ListExecutionFunctionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionFunctionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionFunctionsResponse> __Marshaller_zitadel_action_v2_ListExecutionFunctionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionFunctionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionMethodsRequest> __Marshaller_zitadel_action_v2_ListExecutionMethodsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionMethodsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionMethodsResponse> __Marshaller_zitadel_action_v2_ListExecutionMethodsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionMethodsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionServicesRequest> __Marshaller_zitadel_action_v2_ListExecutionServicesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionServicesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.Action.V2.ListExecutionServicesResponse> __Marshaller_zitadel_action_v2_ListExecutionServicesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.Action.V2.ListExecutionServicesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.CreateTargetRequest, global::Zitadel.Action.V2.CreateTargetResponse> __Method_CreateTarget = new grpc::Method<global::Zitadel.Action.V2.CreateTargetRequest, global::Zitadel.Action.V2.CreateTargetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTarget",
        __Marshaller_zitadel_action_v2_CreateTargetRequest,
        __Marshaller_zitadel_action_v2_CreateTargetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.UpdateTargetRequest, global::Zitadel.Action.V2.UpdateTargetResponse> __Method_UpdateTarget = new grpc::Method<global::Zitadel.Action.V2.UpdateTargetRequest, global::Zitadel.Action.V2.UpdateTargetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTarget",
        __Marshaller_zitadel_action_v2_UpdateTargetRequest,
        __Marshaller_zitadel_action_v2_UpdateTargetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.DeleteTargetRequest, global::Zitadel.Action.V2.DeleteTargetResponse> __Method_DeleteTarget = new grpc::Method<global::Zitadel.Action.V2.DeleteTargetRequest, global::Zitadel.Action.V2.DeleteTargetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTarget",
        __Marshaller_zitadel_action_v2_DeleteTargetRequest,
        __Marshaller_zitadel_action_v2_DeleteTargetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.GetTargetRequest, global::Zitadel.Action.V2.GetTargetResponse> __Method_GetTarget = new grpc::Method<global::Zitadel.Action.V2.GetTargetRequest, global::Zitadel.Action.V2.GetTargetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTarget",
        __Marshaller_zitadel_action_v2_GetTargetRequest,
        __Marshaller_zitadel_action_v2_GetTargetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.ListTargetsRequest, global::Zitadel.Action.V2.ListTargetsResponse> __Method_ListTargets = new grpc::Method<global::Zitadel.Action.V2.ListTargetsRequest, global::Zitadel.Action.V2.ListTargetsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTargets",
        __Marshaller_zitadel_action_v2_ListTargetsRequest,
        __Marshaller_zitadel_action_v2_ListTargetsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.SetExecutionRequest, global::Zitadel.Action.V2.SetExecutionResponse> __Method_SetExecution = new grpc::Method<global::Zitadel.Action.V2.SetExecutionRequest, global::Zitadel.Action.V2.SetExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetExecution",
        __Marshaller_zitadel_action_v2_SetExecutionRequest,
        __Marshaller_zitadel_action_v2_SetExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.ListExecutionsRequest, global::Zitadel.Action.V2.ListExecutionsResponse> __Method_ListExecutions = new grpc::Method<global::Zitadel.Action.V2.ListExecutionsRequest, global::Zitadel.Action.V2.ListExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExecutions",
        __Marshaller_zitadel_action_v2_ListExecutionsRequest,
        __Marshaller_zitadel_action_v2_ListExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.ListExecutionFunctionsRequest, global::Zitadel.Action.V2.ListExecutionFunctionsResponse> __Method_ListExecutionFunctions = new grpc::Method<global::Zitadel.Action.V2.ListExecutionFunctionsRequest, global::Zitadel.Action.V2.ListExecutionFunctionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExecutionFunctions",
        __Marshaller_zitadel_action_v2_ListExecutionFunctionsRequest,
        __Marshaller_zitadel_action_v2_ListExecutionFunctionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.ListExecutionMethodsRequest, global::Zitadel.Action.V2.ListExecutionMethodsResponse> __Method_ListExecutionMethods = new grpc::Method<global::Zitadel.Action.V2.ListExecutionMethodsRequest, global::Zitadel.Action.V2.ListExecutionMethodsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExecutionMethods",
        __Marshaller_zitadel_action_v2_ListExecutionMethodsRequest,
        __Marshaller_zitadel_action_v2_ListExecutionMethodsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.Action.V2.ListExecutionServicesRequest, global::Zitadel.Action.V2.ListExecutionServicesResponse> __Method_ListExecutionServices = new grpc::Method<global::Zitadel.Action.V2.ListExecutionServicesRequest, global::Zitadel.Action.V2.ListExecutionServicesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListExecutionServices",
        __Marshaller_zitadel_action_v2_ListExecutionServicesRequest,
        __Marshaller_zitadel_action_v2_ListExecutionServicesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.Action.V2.ActionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ActionService</summary>
    [grpc::BindServiceMethod(typeof(ActionService), "BindService")]
    public abstract partial class ActionServiceBase
    {
      /// <summary>
      /// Create Target
      ///
      /// Create a new target to your endpoint, which can be used in executions.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.CreateTargetResponse> CreateTarget(global::Zitadel.Action.V2.CreateTargetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Target
      ///
      /// Update an existing target.
      /// To generate a new signing key set the optional expirationSigningKey.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.UpdateTargetResponse> UpdateTarget(global::Zitadel.Action.V2.UpdateTargetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Target
      ///
      /// Delete an existing target. This will remove it from any configured execution as well.
      /// In case the target is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `action.target.delete`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.DeleteTargetResponse> DeleteTarget(global::Zitadel.Action.V2.DeleteTargetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get Target
      ///
      /// Returns the target identified by the requested ID.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.GetTargetResponse> GetTarget(global::Zitadel.Action.V2.GetTargetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List targets
      ///
      /// List all matching targets. By default all targets of the instance are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.ListTargetsResponse> ListTargets(global::Zitadel.Action.V2.ListTargetsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set Execution
      ///
      /// Sets an execution to call a target or include the targets of another execution.
      /// Setting an empty list of targets will remove all targets from the execution, making it a noop.
      ///
      /// Required permission:
      ///   - `action.execution.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.SetExecutionResponse> SetExecution(global::Zitadel.Action.V2.SetExecutionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Executions
      ///
      /// List all matching executions. By default all executions of the instance are returned that have at least one execution target.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.execution.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.ListExecutionsResponse> ListExecutions(global::Zitadel.Action.V2.ListExecutionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Execution Functions
      ///
      /// List all available functions which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.ListExecutionFunctionsResponse> ListExecutionFunctions(global::Zitadel.Action.V2.ListExecutionFunctionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Execution Methods
      ///
      /// List all available methods which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.ListExecutionMethodsResponse> ListExecutionMethods(global::Zitadel.Action.V2.ListExecutionMethodsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Execution Services
      ///
      /// List all available services which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.Action.V2.ListExecutionServicesResponse> ListExecutionServices(global::Zitadel.Action.V2.ListExecutionServicesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ActionService</summary>
    public partial class ActionServiceClient : grpc::ClientBase<ActionServiceClient>
    {
      /// <summary>Creates a new client for ActionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ActionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ActionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ActionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ActionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ActionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create Target
      ///
      /// Create a new target to your endpoint, which can be used in executions.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.CreateTargetResponse CreateTarget(global::Zitadel.Action.V2.CreateTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Target
      ///
      /// Create a new target to your endpoint, which can be used in executions.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.CreateTargetResponse CreateTarget(global::Zitadel.Action.V2.CreateTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTarget, null, options, request);
      }
      /// <summary>
      /// Create Target
      ///
      /// Create a new target to your endpoint, which can be used in executions.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.CreateTargetResponse> CreateTargetAsync(global::Zitadel.Action.V2.CreateTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Target
      ///
      /// Create a new target to your endpoint, which can be used in executions.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.CreateTargetResponse> CreateTargetAsync(global::Zitadel.Action.V2.CreateTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTarget, null, options, request);
      }
      /// <summary>
      /// Update Target
      ///
      /// Update an existing target.
      /// To generate a new signing key set the optional expirationSigningKey.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.UpdateTargetResponse UpdateTarget(global::Zitadel.Action.V2.UpdateTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Target
      ///
      /// Update an existing target.
      /// To generate a new signing key set the optional expirationSigningKey.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.UpdateTargetResponse UpdateTarget(global::Zitadel.Action.V2.UpdateTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTarget, null, options, request);
      }
      /// <summary>
      /// Update Target
      ///
      /// Update an existing target.
      /// To generate a new signing key set the optional expirationSigningKey.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.UpdateTargetResponse> UpdateTargetAsync(global::Zitadel.Action.V2.UpdateTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Target
      ///
      /// Update an existing target.
      /// To generate a new signing key set the optional expirationSigningKey.
      ///
      /// Required permission:
      ///   - `action.target.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.UpdateTargetResponse> UpdateTargetAsync(global::Zitadel.Action.V2.UpdateTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTarget, null, options, request);
      }
      /// <summary>
      /// Delete Target
      ///
      /// Delete an existing target. This will remove it from any configured execution as well.
      /// In case the target is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `action.target.delete`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.DeleteTargetResponse DeleteTarget(global::Zitadel.Action.V2.DeleteTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Target
      ///
      /// Delete an existing target. This will remove it from any configured execution as well.
      /// In case the target is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `action.target.delete`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.DeleteTargetResponse DeleteTarget(global::Zitadel.Action.V2.DeleteTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTarget, null, options, request);
      }
      /// <summary>
      /// Delete Target
      ///
      /// Delete an existing target. This will remove it from any configured execution as well.
      /// In case the target is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `action.target.delete`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.DeleteTargetResponse> DeleteTargetAsync(global::Zitadel.Action.V2.DeleteTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Target
      ///
      /// Delete an existing target. This will remove it from any configured execution as well.
      /// In case the target is not found, the request will return a successful response as
      /// the desired state is already achieved.
      ///
      /// Required permission:
      ///   - `action.target.delete`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.DeleteTargetResponse> DeleteTargetAsync(global::Zitadel.Action.V2.DeleteTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTarget, null, options, request);
      }
      /// <summary>
      /// Get Target
      ///
      /// Returns the target identified by the requested ID.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.GetTargetResponse GetTarget(global::Zitadel.Action.V2.GetTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTarget(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Target
      ///
      /// Returns the target identified by the requested ID.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.GetTargetResponse GetTarget(global::Zitadel.Action.V2.GetTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTarget, null, options, request);
      }
      /// <summary>
      /// Get Target
      ///
      /// Returns the target identified by the requested ID.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.GetTargetResponse> GetTargetAsync(global::Zitadel.Action.V2.GetTargetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTargetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Target
      ///
      /// Returns the target identified by the requested ID.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.GetTargetResponse> GetTargetAsync(global::Zitadel.Action.V2.GetTargetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTarget, null, options, request);
      }
      /// <summary>
      /// List targets
      ///
      /// List all matching targets. By default all targets of the instance are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListTargetsResponse ListTargets(global::Zitadel.Action.V2.ListTargetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTargets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List targets
      ///
      /// List all matching targets. By default all targets of the instance are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListTargetsResponse ListTargets(global::Zitadel.Action.V2.ListTargetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTargets, null, options, request);
      }
      /// <summary>
      /// List targets
      ///
      /// List all matching targets. By default all targets of the instance are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListTargetsResponse> ListTargetsAsync(global::Zitadel.Action.V2.ListTargetsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTargetsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List targets
      ///
      /// List all matching targets. By default all targets of the instance are returned.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.target.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListTargetsResponse> ListTargetsAsync(global::Zitadel.Action.V2.ListTargetsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTargets, null, options, request);
      }
      /// <summary>
      /// Set Execution
      ///
      /// Sets an execution to call a target or include the targets of another execution.
      /// Setting an empty list of targets will remove all targets from the execution, making it a noop.
      ///
      /// Required permission:
      ///   - `action.execution.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.SetExecutionResponse SetExecution(global::Zitadel.Action.V2.SetExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set Execution
      ///
      /// Sets an execution to call a target or include the targets of another execution.
      /// Setting an empty list of targets will remove all targets from the execution, making it a noop.
      ///
      /// Required permission:
      ///   - `action.execution.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.SetExecutionResponse SetExecution(global::Zitadel.Action.V2.SetExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetExecution, null, options, request);
      }
      /// <summary>
      /// Set Execution
      ///
      /// Sets an execution to call a target or include the targets of another execution.
      /// Setting an empty list of targets will remove all targets from the execution, making it a noop.
      ///
      /// Required permission:
      ///   - `action.execution.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.SetExecutionResponse> SetExecutionAsync(global::Zitadel.Action.V2.SetExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set Execution
      ///
      /// Sets an execution to call a target or include the targets of another execution.
      /// Setting an empty list of targets will remove all targets from the execution, making it a noop.
      ///
      /// Required permission:
      ///   - `action.execution.write`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.SetExecutionResponse> SetExecutionAsync(global::Zitadel.Action.V2.SetExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetExecution, null, options, request);
      }
      /// <summary>
      /// List Executions
      ///
      /// List all matching executions. By default all executions of the instance are returned that have at least one execution target.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.execution.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionsResponse ListExecutions(global::Zitadel.Action.V2.ListExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Executions
      ///
      /// List all matching executions. By default all executions of the instance are returned that have at least one execution target.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.execution.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionsResponse ListExecutions(global::Zitadel.Action.V2.ListExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExecutions, null, options, request);
      }
      /// <summary>
      /// List Executions
      ///
      /// List all matching executions. By default all executions of the instance are returned that have at least one execution target.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.execution.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionsResponse> ListExecutionsAsync(global::Zitadel.Action.V2.ListExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Executions
      ///
      /// List all matching executions. By default all executions of the instance are returned that have at least one execution target.
      /// Make sure to include a limit and sorting for pagination.
      ///
      /// Required permission:
      ///   - `action.execution.read`
      ///
      /// Required feature flag:
      ///   - `actions`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionsResponse> ListExecutionsAsync(global::Zitadel.Action.V2.ListExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExecutions, null, options, request);
      }
      /// <summary>
      /// List Execution Functions
      ///
      /// List all available functions which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionFunctionsResponse ListExecutionFunctions(global::Zitadel.Action.V2.ListExecutionFunctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionFunctions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Execution Functions
      ///
      /// List all available functions which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionFunctionsResponse ListExecutionFunctions(global::Zitadel.Action.V2.ListExecutionFunctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExecutionFunctions, null, options, request);
      }
      /// <summary>
      /// List Execution Functions
      ///
      /// List all available functions which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionFunctionsResponse> ListExecutionFunctionsAsync(global::Zitadel.Action.V2.ListExecutionFunctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionFunctionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Execution Functions
      ///
      /// List all available functions which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionFunctionsResponse> ListExecutionFunctionsAsync(global::Zitadel.Action.V2.ListExecutionFunctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExecutionFunctions, null, options, request);
      }
      /// <summary>
      /// List Execution Methods
      ///
      /// List all available methods which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionMethodsResponse ListExecutionMethods(global::Zitadel.Action.V2.ListExecutionMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionMethods(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Execution Methods
      ///
      /// List all available methods which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionMethodsResponse ListExecutionMethods(global::Zitadel.Action.V2.ListExecutionMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExecutionMethods, null, options, request);
      }
      /// <summary>
      /// List Execution Methods
      ///
      /// List all available methods which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionMethodsResponse> ListExecutionMethodsAsync(global::Zitadel.Action.V2.ListExecutionMethodsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionMethodsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Execution Methods
      ///
      /// List all available methods which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionMethodsResponse> ListExecutionMethodsAsync(global::Zitadel.Action.V2.ListExecutionMethodsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExecutionMethods, null, options, request);
      }
      /// <summary>
      /// List Execution Services
      ///
      /// List all available services which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionServicesResponse ListExecutionServices(global::Zitadel.Action.V2.ListExecutionServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionServices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Execution Services
      ///
      /// List all available services which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.Action.V2.ListExecutionServicesResponse ListExecutionServices(global::Zitadel.Action.V2.ListExecutionServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListExecutionServices, null, options, request);
      }
      /// <summary>
      /// List Execution Services
      ///
      /// List all available services which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionServicesResponse> ListExecutionServicesAsync(global::Zitadel.Action.V2.ListExecutionServicesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListExecutionServicesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Execution Services
      ///
      /// List all available services which can be used as condition for executions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.Action.V2.ListExecutionServicesResponse> ListExecutionServicesAsync(global::Zitadel.Action.V2.ListExecutionServicesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListExecutionServices, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ActionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ActionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ActionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateTarget, serviceImpl.CreateTarget)
          .AddMethod(__Method_UpdateTarget, serviceImpl.UpdateTarget)
          .AddMethod(__Method_DeleteTarget, serviceImpl.DeleteTarget)
          .AddMethod(__Method_GetTarget, serviceImpl.GetTarget)
          .AddMethod(__Method_ListTargets, serviceImpl.ListTargets)
          .AddMethod(__Method_SetExecution, serviceImpl.SetExecution)
          .AddMethod(__Method_ListExecutions, serviceImpl.ListExecutions)
          .AddMethod(__Method_ListExecutionFunctions, serviceImpl.ListExecutionFunctions)
          .AddMethod(__Method_ListExecutionMethods, serviceImpl.ListExecutionMethods)
          .AddMethod(__Method_ListExecutionServices, serviceImpl.ListExecutionServices).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ActionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.CreateTargetRequest, global::Zitadel.Action.V2.CreateTargetResponse>(serviceImpl.CreateTarget));
      serviceBinder.AddMethod(__Method_UpdateTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.UpdateTargetRequest, global::Zitadel.Action.V2.UpdateTargetResponse>(serviceImpl.UpdateTarget));
      serviceBinder.AddMethod(__Method_DeleteTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.DeleteTargetRequest, global::Zitadel.Action.V2.DeleteTargetResponse>(serviceImpl.DeleteTarget));
      serviceBinder.AddMethod(__Method_GetTarget, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.GetTargetRequest, global::Zitadel.Action.V2.GetTargetResponse>(serviceImpl.GetTarget));
      serviceBinder.AddMethod(__Method_ListTargets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.ListTargetsRequest, global::Zitadel.Action.V2.ListTargetsResponse>(serviceImpl.ListTargets));
      serviceBinder.AddMethod(__Method_SetExecution, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.SetExecutionRequest, global::Zitadel.Action.V2.SetExecutionResponse>(serviceImpl.SetExecution));
      serviceBinder.AddMethod(__Method_ListExecutions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.ListExecutionsRequest, global::Zitadel.Action.V2.ListExecutionsResponse>(serviceImpl.ListExecutions));
      serviceBinder.AddMethod(__Method_ListExecutionFunctions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.ListExecutionFunctionsRequest, global::Zitadel.Action.V2.ListExecutionFunctionsResponse>(serviceImpl.ListExecutionFunctions));
      serviceBinder.AddMethod(__Method_ListExecutionMethods, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.ListExecutionMethodsRequest, global::Zitadel.Action.V2.ListExecutionMethodsResponse>(serviceImpl.ListExecutionMethods));
      serviceBinder.AddMethod(__Method_ListExecutionServices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.Action.V2.ListExecutionServicesRequest, global::Zitadel.Action.V2.ListExecutionServicesResponse>(serviceImpl.ListExecutionServices));
    }

  }
}
#endregion
