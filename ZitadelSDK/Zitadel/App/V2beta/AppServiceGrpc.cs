// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/app/v2beta/app_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.App.V2beta {
  /// <summary>
  /// Service to manage apps.
  /// The service provides methods to create, update, delete and list apps and app keys.
  /// </summary>
  public static partial class AppService
  {
    static readonly string __ServiceName = "zitadel.app.v2beta.AppService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.CreateApplicationRequest> __Marshaller_zitadel_app_v2beta_CreateApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.CreateApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.CreateApplicationResponse> __Marshaller_zitadel_app_v2beta_CreateApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.CreateApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.UpdateApplicationRequest> __Marshaller_zitadel_app_v2beta_UpdateApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.UpdateApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.UpdateApplicationResponse> __Marshaller_zitadel_app_v2beta_UpdateApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.UpdateApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.GetApplicationRequest> __Marshaller_zitadel_app_v2beta_GetApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.GetApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.GetApplicationResponse> __Marshaller_zitadel_app_v2beta_GetApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.GetApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.DeleteApplicationRequest> __Marshaller_zitadel_app_v2beta_DeleteApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.DeleteApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.DeleteApplicationResponse> __Marshaller_zitadel_app_v2beta_DeleteApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.DeleteApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.DeactivateApplicationRequest> __Marshaller_zitadel_app_v2beta_DeactivateApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.DeactivateApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.DeactivateApplicationResponse> __Marshaller_zitadel_app_v2beta_DeactivateApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.DeactivateApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.ReactivateApplicationRequest> __Marshaller_zitadel_app_v2beta_ReactivateApplicationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.ReactivateApplicationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.ReactivateApplicationResponse> __Marshaller_zitadel_app_v2beta_ReactivateApplicationResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.ReactivateApplicationResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.RegenerateClientSecretRequest> __Marshaller_zitadel_app_v2beta_RegenerateClientSecretRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.RegenerateClientSecretRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.RegenerateClientSecretResponse> __Marshaller_zitadel_app_v2beta_RegenerateClientSecretResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.RegenerateClientSecretResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.ListApplicationsRequest> __Marshaller_zitadel_app_v2beta_ListApplicationsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.ListApplicationsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.ListApplicationsResponse> __Marshaller_zitadel_app_v2beta_ListApplicationsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.ListApplicationsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.CreateApplicationKeyRequest> __Marshaller_zitadel_app_v2beta_CreateApplicationKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.CreateApplicationKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.CreateApplicationKeyResponse> __Marshaller_zitadel_app_v2beta_CreateApplicationKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.CreateApplicationKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.DeleteApplicationKeyRequest> __Marshaller_zitadel_app_v2beta_DeleteApplicationKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.DeleteApplicationKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.DeleteApplicationKeyResponse> __Marshaller_zitadel_app_v2beta_DeleteApplicationKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.DeleteApplicationKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.GetApplicationKeyRequest> __Marshaller_zitadel_app_v2beta_GetApplicationKeyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.GetApplicationKeyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.GetApplicationKeyResponse> __Marshaller_zitadel_app_v2beta_GetApplicationKeyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.GetApplicationKeyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.ListApplicationKeysRequest> __Marshaller_zitadel_app_v2beta_ListApplicationKeysRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.ListApplicationKeysRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.App.V2beta.ListApplicationKeysResponse> __Marshaller_zitadel_app_v2beta_ListApplicationKeysResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.App.V2beta.ListApplicationKeysResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.CreateApplicationRequest, global::Zitadel.App.V2beta.CreateApplicationResponse> __Method_CreateApplication = new grpc::Method<global::Zitadel.App.V2beta.CreateApplicationRequest, global::Zitadel.App.V2beta.CreateApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateApplication",
        __Marshaller_zitadel_app_v2beta_CreateApplicationRequest,
        __Marshaller_zitadel_app_v2beta_CreateApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.UpdateApplicationRequest, global::Zitadel.App.V2beta.UpdateApplicationResponse> __Method_UpdateApplication = new grpc::Method<global::Zitadel.App.V2beta.UpdateApplicationRequest, global::Zitadel.App.V2beta.UpdateApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateApplication",
        __Marshaller_zitadel_app_v2beta_UpdateApplicationRequest,
        __Marshaller_zitadel_app_v2beta_UpdateApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.GetApplicationRequest, global::Zitadel.App.V2beta.GetApplicationResponse> __Method_GetApplication = new grpc::Method<global::Zitadel.App.V2beta.GetApplicationRequest, global::Zitadel.App.V2beta.GetApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplication",
        __Marshaller_zitadel_app_v2beta_GetApplicationRequest,
        __Marshaller_zitadel_app_v2beta_GetApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.DeleteApplicationRequest, global::Zitadel.App.V2beta.DeleteApplicationResponse> __Method_DeleteApplication = new grpc::Method<global::Zitadel.App.V2beta.DeleteApplicationRequest, global::Zitadel.App.V2beta.DeleteApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteApplication",
        __Marshaller_zitadel_app_v2beta_DeleteApplicationRequest,
        __Marshaller_zitadel_app_v2beta_DeleteApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.DeactivateApplicationRequest, global::Zitadel.App.V2beta.DeactivateApplicationResponse> __Method_DeactivateApplication = new grpc::Method<global::Zitadel.App.V2beta.DeactivateApplicationRequest, global::Zitadel.App.V2beta.DeactivateApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeactivateApplication",
        __Marshaller_zitadel_app_v2beta_DeactivateApplicationRequest,
        __Marshaller_zitadel_app_v2beta_DeactivateApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.ReactivateApplicationRequest, global::Zitadel.App.V2beta.ReactivateApplicationResponse> __Method_ReactivateApplication = new grpc::Method<global::Zitadel.App.V2beta.ReactivateApplicationRequest, global::Zitadel.App.V2beta.ReactivateApplicationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReactivateApplication",
        __Marshaller_zitadel_app_v2beta_ReactivateApplicationRequest,
        __Marshaller_zitadel_app_v2beta_ReactivateApplicationResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.RegenerateClientSecretRequest, global::Zitadel.App.V2beta.RegenerateClientSecretResponse> __Method_RegenerateClientSecret = new grpc::Method<global::Zitadel.App.V2beta.RegenerateClientSecretRequest, global::Zitadel.App.V2beta.RegenerateClientSecretResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegenerateClientSecret",
        __Marshaller_zitadel_app_v2beta_RegenerateClientSecretRequest,
        __Marshaller_zitadel_app_v2beta_RegenerateClientSecretResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.ListApplicationsRequest, global::Zitadel.App.V2beta.ListApplicationsResponse> __Method_ListApplications = new grpc::Method<global::Zitadel.App.V2beta.ListApplicationsRequest, global::Zitadel.App.V2beta.ListApplicationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListApplications",
        __Marshaller_zitadel_app_v2beta_ListApplicationsRequest,
        __Marshaller_zitadel_app_v2beta_ListApplicationsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.CreateApplicationKeyRequest, global::Zitadel.App.V2beta.CreateApplicationKeyResponse> __Method_CreateApplicationKey = new grpc::Method<global::Zitadel.App.V2beta.CreateApplicationKeyRequest, global::Zitadel.App.V2beta.CreateApplicationKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateApplicationKey",
        __Marshaller_zitadel_app_v2beta_CreateApplicationKeyRequest,
        __Marshaller_zitadel_app_v2beta_CreateApplicationKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.DeleteApplicationKeyRequest, global::Zitadel.App.V2beta.DeleteApplicationKeyResponse> __Method_DeleteApplicationKey = new grpc::Method<global::Zitadel.App.V2beta.DeleteApplicationKeyRequest, global::Zitadel.App.V2beta.DeleteApplicationKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteApplicationKey",
        __Marshaller_zitadel_app_v2beta_DeleteApplicationKeyRequest,
        __Marshaller_zitadel_app_v2beta_DeleteApplicationKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.GetApplicationKeyRequest, global::Zitadel.App.V2beta.GetApplicationKeyResponse> __Method_GetApplicationKey = new grpc::Method<global::Zitadel.App.V2beta.GetApplicationKeyRequest, global::Zitadel.App.V2beta.GetApplicationKeyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetApplicationKey",
        __Marshaller_zitadel_app_v2beta_GetApplicationKeyRequest,
        __Marshaller_zitadel_app_v2beta_GetApplicationKeyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.App.V2beta.ListApplicationKeysRequest, global::Zitadel.App.V2beta.ListApplicationKeysResponse> __Method_ListApplicationKeys = new grpc::Method<global::Zitadel.App.V2beta.ListApplicationKeysRequest, global::Zitadel.App.V2beta.ListApplicationKeysResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListApplicationKeys",
        __Marshaller_zitadel_app_v2beta_ListApplicationKeysRequest,
        __Marshaller_zitadel_app_v2beta_ListApplicationKeysResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.App.V2beta.AppServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AppService</summary>
    [grpc::BindServiceMethod(typeof(AppService), "BindService")]
    public abstract partial class AppServiceBase
    {
      /// <summary>
      /// Create Application
      ///
      /// Create an application. The application can be OIDC, API or SAML type, based on the input.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.CreateApplicationResponse> CreateApplication(global::Zitadel.App.V2beta.CreateApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Update Application
      ///
      /// Changes the configuration of an OIDC, API or SAML type application, as well as
      /// the application name, based on the input provided.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.UpdateApplicationResponse> UpdateApplication(global::Zitadel.App.V2beta.UpdateApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get Application
      ///
      /// Retrieves the application matching the provided ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.GetApplicationResponse> GetApplication(global::Zitadel.App.V2beta.GetApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Application
      ///
      /// Deletes the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.delete
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.DeleteApplicationResponse> DeleteApplication(global::Zitadel.App.V2beta.DeleteApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deactivate Application
      ///
      /// Deactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.DeactivateApplicationResponse> DeactivateApplication(global::Zitadel.App.V2beta.DeactivateApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Reactivate Application
      ///
      /// Reactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.ReactivateApplicationResponse> ReactivateApplication(global::Zitadel.App.V2beta.ReactivateApplicationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Regenerate Client Secret
      ///
      /// Regenerates the client secret of an API or OIDC application that belongs to the input project.
      /// 
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.RegenerateClientSecretResponse> RegenerateClientSecret(global::Zitadel.App.V2beta.RegenerateClientSecretRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Applications
      ///
      /// Returns a list of applications matching the input parameters that belong to the provided
      /// project.
      ///
      /// The result can be sorted by app id, name, creation date, change date or state. It can also
      /// be filtered by app state, app type and app name.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.ListApplicationsResponse> ListApplications(global::Zitadel.App.V2beta.ListApplicationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create Application Key 
      ///
      /// Create a new application key, which is used to authorize an API application.
      ///
      /// Key details are returned in the response. They must be stored safely, as it will not
      /// be possible to retrieve them again.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.CreateApplicationKeyResponse> CreateApplicationKey(global::Zitadel.App.V2beta.CreateApplicationKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete Application Key 
      ///
      /// Deletes an application key matching the provided ID.
      ///
      /// Organization ID is not mandatory, but helps with filtering/performance.
      ///
      /// The deletion time is returned in response message.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.DeleteApplicationKeyResponse> DeleteApplicationKey(global::Zitadel.App.V2beta.DeleteApplicationKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get Application Key
      ///
      /// Retrieves the application key matching the provided ID.
      ///
      /// Specifying a project, organization and app ID is optional but help with filtering/performance.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.GetApplicationKeyResponse> GetApplicationKey(global::Zitadel.App.V2beta.GetApplicationKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Application Keys
      ///
      /// Returns a list of application keys matching the input parameters.
      ///
      /// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
      /// It can also be filtered by app, project or organization ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.App.V2beta.ListApplicationKeysResponse> ListApplicationKeys(global::Zitadel.App.V2beta.ListApplicationKeysRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AppService</summary>
    public partial class AppServiceClient : grpc::ClientBase<AppServiceClient>
    {
      /// <summary>Creates a new client for AppService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AppServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AppService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AppServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AppServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AppServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create Application
      ///
      /// Create an application. The application can be OIDC, API or SAML type, based on the input.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.CreateApplicationResponse CreateApplication(global::Zitadel.App.V2beta.CreateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Application
      ///
      /// Create an application. The application can be OIDC, API or SAML type, based on the input.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.CreateApplicationResponse CreateApplication(global::Zitadel.App.V2beta.CreateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateApplication, null, options, request);
      }
      /// <summary>
      /// Create Application
      ///
      /// Create an application. The application can be OIDC, API or SAML type, based on the input.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.CreateApplicationResponse> CreateApplicationAsync(global::Zitadel.App.V2beta.CreateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Application
      ///
      /// Create an application. The application can be OIDC, API or SAML type, based on the input.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.CreateApplicationResponse> CreateApplicationAsync(global::Zitadel.App.V2beta.CreateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateApplication, null, options, request);
      }
      /// <summary>
      /// Update Application
      ///
      /// Changes the configuration of an OIDC, API or SAML type application, as well as
      /// the application name, based on the input provided.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.UpdateApplicationResponse UpdateApplication(global::Zitadel.App.V2beta.UpdateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Application
      ///
      /// Changes the configuration of an OIDC, API or SAML type application, as well as
      /// the application name, based on the input provided.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.UpdateApplicationResponse UpdateApplication(global::Zitadel.App.V2beta.UpdateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateApplication, null, options, request);
      }
      /// <summary>
      /// Update Application
      ///
      /// Changes the configuration of an OIDC, API or SAML type application, as well as
      /// the application name, based on the input provided.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.UpdateApplicationResponse> UpdateApplicationAsync(global::Zitadel.App.V2beta.UpdateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Update Application
      ///
      /// Changes the configuration of an OIDC, API or SAML type application, as well as
      /// the application name, based on the input provided.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.UpdateApplicationResponse> UpdateApplicationAsync(global::Zitadel.App.V2beta.UpdateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateApplication, null, options, request);
      }
      /// <summary>
      /// Get Application
      ///
      /// Retrieves the application matching the provided ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.GetApplicationResponse GetApplication(global::Zitadel.App.V2beta.GetApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Application
      ///
      /// Retrieves the application matching the provided ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.GetApplicationResponse GetApplication(global::Zitadel.App.V2beta.GetApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplication, null, options, request);
      }
      /// <summary>
      /// Get Application
      ///
      /// Retrieves the application matching the provided ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.GetApplicationResponse> GetApplicationAsync(global::Zitadel.App.V2beta.GetApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Application
      ///
      /// Retrieves the application matching the provided ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.GetApplicationResponse> GetApplicationAsync(global::Zitadel.App.V2beta.GetApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplication, null, options, request);
      }
      /// <summary>
      /// Delete Application
      ///
      /// Deletes the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.DeleteApplicationResponse DeleteApplication(global::Zitadel.App.V2beta.DeleteApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Application
      ///
      /// Deletes the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.DeleteApplicationResponse DeleteApplication(global::Zitadel.App.V2beta.DeleteApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteApplication, null, options, request);
      }
      /// <summary>
      /// Delete Application
      ///
      /// Deletes the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.DeleteApplicationResponse> DeleteApplicationAsync(global::Zitadel.App.V2beta.DeleteApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Application
      ///
      /// Deletes the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.delete
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.DeleteApplicationResponse> DeleteApplicationAsync(global::Zitadel.App.V2beta.DeleteApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteApplication, null, options, request);
      }
      /// <summary>
      /// Deactivate Application
      ///
      /// Deactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.DeactivateApplicationResponse DeactivateApplication(global::Zitadel.App.V2beta.DeactivateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Application
      ///
      /// Deactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.DeactivateApplicationResponse DeactivateApplication(global::Zitadel.App.V2beta.DeactivateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeactivateApplication, null, options, request);
      }
      /// <summary>
      /// Deactivate Application
      ///
      /// Deactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.DeactivateApplicationResponse> DeactivateApplicationAsync(global::Zitadel.App.V2beta.DeactivateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeactivateApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deactivate Application
      ///
      /// Deactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.DeactivateApplicationResponse> DeactivateApplicationAsync(global::Zitadel.App.V2beta.DeactivateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeactivateApplication, null, options, request);
      }
      /// <summary>
      /// Reactivate Application
      ///
      /// Reactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.ReactivateApplicationResponse ReactivateApplication(global::Zitadel.App.V2beta.ReactivateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReactivateApplication(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reactivate Application
      ///
      /// Reactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.ReactivateApplicationResponse ReactivateApplication(global::Zitadel.App.V2beta.ReactivateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReactivateApplication, null, options, request);
      }
      /// <summary>
      /// Reactivate Application
      ///
      /// Reactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.ReactivateApplicationResponse> ReactivateApplicationAsync(global::Zitadel.App.V2beta.ReactivateApplicationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReactivateApplicationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Reactivate Application
      ///
      /// Reactivates the application belonging to the input project and matching the provided
      /// application ID.
      ///
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.ReactivateApplicationResponse> ReactivateApplicationAsync(global::Zitadel.App.V2beta.ReactivateApplicationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReactivateApplication, null, options, request);
      }
      /// <summary>
      /// Regenerate Client Secret
      ///
      /// Regenerates the client secret of an API or OIDC application that belongs to the input project.
      /// 
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.RegenerateClientSecretResponse RegenerateClientSecret(global::Zitadel.App.V2beta.RegenerateClientSecretRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegenerateClientSecret(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Regenerate Client Secret
      ///
      /// Regenerates the client secret of an API or OIDC application that belongs to the input project.
      /// 
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.RegenerateClientSecretResponse RegenerateClientSecret(global::Zitadel.App.V2beta.RegenerateClientSecretRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegenerateClientSecret, null, options, request);
      }
      /// <summary>
      /// Regenerate Client Secret
      ///
      /// Regenerates the client secret of an API or OIDC application that belongs to the input project.
      /// 
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.RegenerateClientSecretResponse> RegenerateClientSecretAsync(global::Zitadel.App.V2beta.RegenerateClientSecretRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegenerateClientSecretAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Regenerate Client Secret
      ///
      /// Regenerates the client secret of an API or OIDC application that belongs to the input project.
      /// 
      /// Required permissions:
      ///   - project.app.write
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.RegenerateClientSecretResponse> RegenerateClientSecretAsync(global::Zitadel.App.V2beta.RegenerateClientSecretRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegenerateClientSecret, null, options, request);
      }
      /// <summary>
      /// List Applications
      ///
      /// Returns a list of applications matching the input parameters that belong to the provided
      /// project.
      ///
      /// The result can be sorted by app id, name, creation date, change date or state. It can also
      /// be filtered by app state, app type and app name.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.ListApplicationsResponse ListApplications(global::Zitadel.App.V2beta.ListApplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApplications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Applications
      ///
      /// Returns a list of applications matching the input parameters that belong to the provided
      /// project.
      ///
      /// The result can be sorted by app id, name, creation date, change date or state. It can also
      /// be filtered by app state, app type and app name.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.ListApplicationsResponse ListApplications(global::Zitadel.App.V2beta.ListApplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListApplications, null, options, request);
      }
      /// <summary>
      /// List Applications
      ///
      /// Returns a list of applications matching the input parameters that belong to the provided
      /// project.
      ///
      /// The result can be sorted by app id, name, creation date, change date or state. It can also
      /// be filtered by app state, app type and app name.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.ListApplicationsResponse> ListApplicationsAsync(global::Zitadel.App.V2beta.ListApplicationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApplicationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Applications
      ///
      /// Returns a list of applications matching the input parameters that belong to the provided
      /// project.
      ///
      /// The result can be sorted by app id, name, creation date, change date or state. It can also
      /// be filtered by app state, app type and app name.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.ListApplicationsResponse> ListApplicationsAsync(global::Zitadel.App.V2beta.ListApplicationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListApplications, null, options, request);
      }
      /// <summary>
      /// Create Application Key 
      ///
      /// Create a new application key, which is used to authorize an API application.
      ///
      /// Key details are returned in the response. They must be stored safely, as it will not
      /// be possible to retrieve them again.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.CreateApplicationKeyResponse CreateApplicationKey(global::Zitadel.App.V2beta.CreateApplicationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateApplicationKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Application Key 
      ///
      /// Create a new application key, which is used to authorize an API application.
      ///
      /// Key details are returned in the response. They must be stored safely, as it will not
      /// be possible to retrieve them again.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.CreateApplicationKeyResponse CreateApplicationKey(global::Zitadel.App.V2beta.CreateApplicationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateApplicationKey, null, options, request);
      }
      /// <summary>
      /// Create Application Key 
      ///
      /// Create a new application key, which is used to authorize an API application.
      ///
      /// Key details are returned in the response. They must be stored safely, as it will not
      /// be possible to retrieve them again.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.CreateApplicationKeyResponse> CreateApplicationKeyAsync(global::Zitadel.App.V2beta.CreateApplicationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateApplicationKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create Application Key 
      ///
      /// Create a new application key, which is used to authorize an API application.
      ///
      /// Key details are returned in the response. They must be stored safely, as it will not
      /// be possible to retrieve them again.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.CreateApplicationKeyResponse> CreateApplicationKeyAsync(global::Zitadel.App.V2beta.CreateApplicationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateApplicationKey, null, options, request);
      }
      /// <summary>
      /// Delete Application Key 
      ///
      /// Deletes an application key matching the provided ID.
      ///
      /// Organization ID is not mandatory, but helps with filtering/performance.
      ///
      /// The deletion time is returned in response message.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.DeleteApplicationKeyResponse DeleteApplicationKey(global::Zitadel.App.V2beta.DeleteApplicationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApplicationKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Application Key 
      ///
      /// Deletes an application key matching the provided ID.
      ///
      /// Organization ID is not mandatory, but helps with filtering/performance.
      ///
      /// The deletion time is returned in response message.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.DeleteApplicationKeyResponse DeleteApplicationKey(global::Zitadel.App.V2beta.DeleteApplicationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteApplicationKey, null, options, request);
      }
      /// <summary>
      /// Delete Application Key 
      ///
      /// Deletes an application key matching the provided ID.
      ///
      /// Organization ID is not mandatory, but helps with filtering/performance.
      ///
      /// The deletion time is returned in response message.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.DeleteApplicationKeyResponse> DeleteApplicationKeyAsync(global::Zitadel.App.V2beta.DeleteApplicationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteApplicationKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete Application Key 
      ///
      /// Deletes an application key matching the provided ID.
      ///
      /// Organization ID is not mandatory, but helps with filtering/performance.
      ///
      /// The deletion time is returned in response message.
      ///
      /// Required permissions:
      ///   - `project.app.write`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.DeleteApplicationKeyResponse> DeleteApplicationKeyAsync(global::Zitadel.App.V2beta.DeleteApplicationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteApplicationKey, null, options, request);
      }
      /// <summary>
      /// Get Application Key
      ///
      /// Retrieves the application key matching the provided ID.
      ///
      /// Specifying a project, organization and app ID is optional but help with filtering/performance.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.GetApplicationKeyResponse GetApplicationKey(global::Zitadel.App.V2beta.GetApplicationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplicationKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Application Key
      ///
      /// Retrieves the application key matching the provided ID.
      ///
      /// Specifying a project, organization and app ID is optional but help with filtering/performance.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.GetApplicationKeyResponse GetApplicationKey(global::Zitadel.App.V2beta.GetApplicationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetApplicationKey, null, options, request);
      }
      /// <summary>
      /// Get Application Key
      ///
      /// Retrieves the application key matching the provided ID.
      ///
      /// Specifying a project, organization and app ID is optional but help with filtering/performance.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.GetApplicationKeyResponse> GetApplicationKeyAsync(global::Zitadel.App.V2beta.GetApplicationKeyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetApplicationKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get Application Key
      ///
      /// Retrieves the application key matching the provided ID.
      ///
      /// Specifying a project, organization and app ID is optional but help with filtering/performance.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.GetApplicationKeyResponse> GetApplicationKeyAsync(global::Zitadel.App.V2beta.GetApplicationKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetApplicationKey, null, options, request);
      }
      /// <summary>
      /// List Application Keys
      ///
      /// Returns a list of application keys matching the input parameters.
      ///
      /// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
      /// It can also be filtered by app, project or organization ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.ListApplicationKeysResponse ListApplicationKeys(global::Zitadel.App.V2beta.ListApplicationKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApplicationKeys(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Application Keys
      ///
      /// Returns a list of application keys matching the input parameters.
      ///
      /// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
      /// It can also be filtered by app, project or organization ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.App.V2beta.ListApplicationKeysResponse ListApplicationKeys(global::Zitadel.App.V2beta.ListApplicationKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListApplicationKeys, null, options, request);
      }
      /// <summary>
      /// List Application Keys
      ///
      /// Returns a list of application keys matching the input parameters.
      ///
      /// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
      /// It can also be filtered by app, project or organization ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.ListApplicationKeysResponse> ListApplicationKeysAsync(global::Zitadel.App.V2beta.ListApplicationKeysRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListApplicationKeysAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Application Keys
      ///
      /// Returns a list of application keys matching the input parameters.
      ///
      /// The result can be sorted by id, aggregate, creation date, expiration date, resource owner or type.
      /// It can also be filtered by app, project or organization ID.
      ///
      /// Required permissions:
      ///   - project.app.read
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.App.V2beta.ListApplicationKeysResponse> ListApplicationKeysAsync(global::Zitadel.App.V2beta.ListApplicationKeysRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListApplicationKeys, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AppServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AppServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AppServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateApplication, serviceImpl.CreateApplication)
          .AddMethod(__Method_UpdateApplication, serviceImpl.UpdateApplication)
          .AddMethod(__Method_GetApplication, serviceImpl.GetApplication)
          .AddMethod(__Method_DeleteApplication, serviceImpl.DeleteApplication)
          .AddMethod(__Method_DeactivateApplication, serviceImpl.DeactivateApplication)
          .AddMethod(__Method_ReactivateApplication, serviceImpl.ReactivateApplication)
          .AddMethod(__Method_RegenerateClientSecret, serviceImpl.RegenerateClientSecret)
          .AddMethod(__Method_ListApplications, serviceImpl.ListApplications)
          .AddMethod(__Method_CreateApplicationKey, serviceImpl.CreateApplicationKey)
          .AddMethod(__Method_DeleteApplicationKey, serviceImpl.DeleteApplicationKey)
          .AddMethod(__Method_GetApplicationKey, serviceImpl.GetApplicationKey)
          .AddMethod(__Method_ListApplicationKeys, serviceImpl.ListApplicationKeys).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AppServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.CreateApplicationRequest, global::Zitadel.App.V2beta.CreateApplicationResponse>(serviceImpl.CreateApplication));
      serviceBinder.AddMethod(__Method_UpdateApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.UpdateApplicationRequest, global::Zitadel.App.V2beta.UpdateApplicationResponse>(serviceImpl.UpdateApplication));
      serviceBinder.AddMethod(__Method_GetApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.GetApplicationRequest, global::Zitadel.App.V2beta.GetApplicationResponse>(serviceImpl.GetApplication));
      serviceBinder.AddMethod(__Method_DeleteApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.DeleteApplicationRequest, global::Zitadel.App.V2beta.DeleteApplicationResponse>(serviceImpl.DeleteApplication));
      serviceBinder.AddMethod(__Method_DeactivateApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.DeactivateApplicationRequest, global::Zitadel.App.V2beta.DeactivateApplicationResponse>(serviceImpl.DeactivateApplication));
      serviceBinder.AddMethod(__Method_ReactivateApplication, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.ReactivateApplicationRequest, global::Zitadel.App.V2beta.ReactivateApplicationResponse>(serviceImpl.ReactivateApplication));
      serviceBinder.AddMethod(__Method_RegenerateClientSecret, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.RegenerateClientSecretRequest, global::Zitadel.App.V2beta.RegenerateClientSecretResponse>(serviceImpl.RegenerateClientSecret));
      serviceBinder.AddMethod(__Method_ListApplications, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.ListApplicationsRequest, global::Zitadel.App.V2beta.ListApplicationsResponse>(serviceImpl.ListApplications));
      serviceBinder.AddMethod(__Method_CreateApplicationKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.CreateApplicationKeyRequest, global::Zitadel.App.V2beta.CreateApplicationKeyResponse>(serviceImpl.CreateApplicationKey));
      serviceBinder.AddMethod(__Method_DeleteApplicationKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.DeleteApplicationKeyRequest, global::Zitadel.App.V2beta.DeleteApplicationKeyResponse>(serviceImpl.DeleteApplicationKey));
      serviceBinder.AddMethod(__Method_GetApplicationKey, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.GetApplicationKeyRequest, global::Zitadel.App.V2beta.GetApplicationKeyResponse>(serviceImpl.GetApplicationKey));
      serviceBinder.AddMethod(__Method_ListApplicationKeys, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.App.V2beta.ListApplicationKeysRequest, global::Zitadel.App.V2beta.ListApplicationKeysResponse>(serviceImpl.ListApplicationKeys));
    }

  }
}
#endregion
