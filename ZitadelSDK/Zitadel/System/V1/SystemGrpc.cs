// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: zitadel/system.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Zitadel.System.V1 {
  public static partial class SystemService
  {
    static readonly string __ServiceName = "zitadel.system.v1.SystemService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.HealthzRequest> __Marshaller_zitadel_system_v1_HealthzRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.HealthzRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.HealthzResponse> __Marshaller_zitadel_system_v1_HealthzResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.HealthzResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListInstancesRequest> __Marshaller_zitadel_system_v1_ListInstancesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListInstancesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListInstancesResponse> __Marshaller_zitadel_system_v1_ListInstancesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListInstancesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.GetInstanceRequest> __Marshaller_zitadel_system_v1_GetInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.GetInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.GetInstanceResponse> __Marshaller_zitadel_system_v1_GetInstanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.GetInstanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.AddInstanceRequest> __Marshaller_zitadel_system_v1_AddInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.AddInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.AddInstanceResponse> __Marshaller_zitadel_system_v1_AddInstanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.AddInstanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.UpdateInstanceRequest> __Marshaller_zitadel_system_v1_UpdateInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.UpdateInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.UpdateInstanceResponse> __Marshaller_zitadel_system_v1_UpdateInstanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.UpdateInstanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.CreateInstanceRequest> __Marshaller_zitadel_system_v1_CreateInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.CreateInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.CreateInstanceResponse> __Marshaller_zitadel_system_v1_CreateInstanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.CreateInstanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveInstanceRequest> __Marshaller_zitadel_system_v1_RemoveInstanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveInstanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveInstanceResponse> __Marshaller_zitadel_system_v1_RemoveInstanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveInstanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListIAMMembersRequest> __Marshaller_zitadel_system_v1_ListIAMMembersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListIAMMembersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListIAMMembersResponse> __Marshaller_zitadel_system_v1_ListIAMMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListIAMMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ExistsDomainRequest> __Marshaller_zitadel_system_v1_ExistsDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ExistsDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ExistsDomainResponse> __Marshaller_zitadel_system_v1_ExistsDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ExistsDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListDomainsRequest> __Marshaller_zitadel_system_v1_ListDomainsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListDomainsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListDomainsResponse> __Marshaller_zitadel_system_v1_ListDomainsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListDomainsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.AddDomainRequest> __Marshaller_zitadel_system_v1_AddDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.AddDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.AddDomainResponse> __Marshaller_zitadel_system_v1_AddDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.AddDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveDomainRequest> __Marshaller_zitadel_system_v1_RemoveDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveDomainResponse> __Marshaller_zitadel_system_v1_RemoveDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetPrimaryDomainRequest> __Marshaller_zitadel_system_v1_SetPrimaryDomainRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetPrimaryDomainRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetPrimaryDomainResponse> __Marshaller_zitadel_system_v1_SetPrimaryDomainResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetPrimaryDomainResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListViewsRequest> __Marshaller_zitadel_system_v1_ListViewsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListViewsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListViewsResponse> __Marshaller_zitadel_system_v1_ListViewsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListViewsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ClearViewRequest> __Marshaller_zitadel_system_v1_ClearViewRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ClearViewRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ClearViewResponse> __Marshaller_zitadel_system_v1_ClearViewResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ClearViewResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListFailedEventsRequest> __Marshaller_zitadel_system_v1_ListFailedEventsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListFailedEventsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ListFailedEventsResponse> __Marshaller_zitadel_system_v1_ListFailedEventsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ListFailedEventsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveFailedEventRequest> __Marshaller_zitadel_system_v1_RemoveFailedEventRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveFailedEventRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveFailedEventResponse> __Marshaller_zitadel_system_v1_RemoveFailedEventResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveFailedEventResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.AddQuotaRequest> __Marshaller_zitadel_system_v1_AddQuotaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.AddQuotaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.AddQuotaResponse> __Marshaller_zitadel_system_v1_AddQuotaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.AddQuotaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetQuotaRequest> __Marshaller_zitadel_system_v1_SetQuotaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetQuotaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetQuotaResponse> __Marshaller_zitadel_system_v1_SetQuotaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetQuotaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveQuotaRequest> __Marshaller_zitadel_system_v1_RemoveQuotaRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveQuotaRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.RemoveQuotaResponse> __Marshaller_zitadel_system_v1_RemoveQuotaResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.RemoveQuotaResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetInstanceFeatureRequest> __Marshaller_zitadel_system_v1_SetInstanceFeatureRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetInstanceFeatureRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetInstanceFeatureResponse> __Marshaller_zitadel_system_v1_SetInstanceFeatureResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetInstanceFeatureResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetLimitsRequest> __Marshaller_zitadel_system_v1_SetLimitsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetLimitsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.SetLimitsResponse> __Marshaller_zitadel_system_v1_SetLimitsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.SetLimitsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.BulkSetLimitsRequest> __Marshaller_zitadel_system_v1_BulkSetLimitsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.BulkSetLimitsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.BulkSetLimitsResponse> __Marshaller_zitadel_system_v1_BulkSetLimitsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.BulkSetLimitsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ResetLimitsRequest> __Marshaller_zitadel_system_v1_ResetLimitsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ResetLimitsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Zitadel.System.V1.ResetLimitsResponse> __Marshaller_zitadel_system_v1_ResetLimitsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Zitadel.System.V1.ResetLimitsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.HealthzRequest, global::Zitadel.System.V1.HealthzResponse> __Method_Healthz = new grpc::Method<global::Zitadel.System.V1.HealthzRequest, global::Zitadel.System.V1.HealthzResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Healthz",
        __Marshaller_zitadel_system_v1_HealthzRequest,
        __Marshaller_zitadel_system_v1_HealthzResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ListInstancesRequest, global::Zitadel.System.V1.ListInstancesResponse> __Method_ListInstances = new grpc::Method<global::Zitadel.System.V1.ListInstancesRequest, global::Zitadel.System.V1.ListInstancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListInstances",
        __Marshaller_zitadel_system_v1_ListInstancesRequest,
        __Marshaller_zitadel_system_v1_ListInstancesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.GetInstanceRequest, global::Zitadel.System.V1.GetInstanceResponse> __Method_GetInstance = new grpc::Method<global::Zitadel.System.V1.GetInstanceRequest, global::Zitadel.System.V1.GetInstanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInstance",
        __Marshaller_zitadel_system_v1_GetInstanceRequest,
        __Marshaller_zitadel_system_v1_GetInstanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.AddInstanceRequest, global::Zitadel.System.V1.AddInstanceResponse> __Method_AddInstance = new grpc::Method<global::Zitadel.System.V1.AddInstanceRequest, global::Zitadel.System.V1.AddInstanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddInstance",
        __Marshaller_zitadel_system_v1_AddInstanceRequest,
        __Marshaller_zitadel_system_v1_AddInstanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.UpdateInstanceRequest, global::Zitadel.System.V1.UpdateInstanceResponse> __Method_UpdateInstance = new grpc::Method<global::Zitadel.System.V1.UpdateInstanceRequest, global::Zitadel.System.V1.UpdateInstanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateInstance",
        __Marshaller_zitadel_system_v1_UpdateInstanceRequest,
        __Marshaller_zitadel_system_v1_UpdateInstanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.CreateInstanceRequest, global::Zitadel.System.V1.CreateInstanceResponse> __Method_CreateInstance = new grpc::Method<global::Zitadel.System.V1.CreateInstanceRequest, global::Zitadel.System.V1.CreateInstanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateInstance",
        __Marshaller_zitadel_system_v1_CreateInstanceRequest,
        __Marshaller_zitadel_system_v1_CreateInstanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.RemoveInstanceRequest, global::Zitadel.System.V1.RemoveInstanceResponse> __Method_RemoveInstance = new grpc::Method<global::Zitadel.System.V1.RemoveInstanceRequest, global::Zitadel.System.V1.RemoveInstanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveInstance",
        __Marshaller_zitadel_system_v1_RemoveInstanceRequest,
        __Marshaller_zitadel_system_v1_RemoveInstanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ListIAMMembersRequest, global::Zitadel.System.V1.ListIAMMembersResponse> __Method_ListIAMMembers = new grpc::Method<global::Zitadel.System.V1.ListIAMMembersRequest, global::Zitadel.System.V1.ListIAMMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListIAMMembers",
        __Marshaller_zitadel_system_v1_ListIAMMembersRequest,
        __Marshaller_zitadel_system_v1_ListIAMMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ExistsDomainRequest, global::Zitadel.System.V1.ExistsDomainResponse> __Method_ExistsDomain = new grpc::Method<global::Zitadel.System.V1.ExistsDomainRequest, global::Zitadel.System.V1.ExistsDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExistsDomain",
        __Marshaller_zitadel_system_v1_ExistsDomainRequest,
        __Marshaller_zitadel_system_v1_ExistsDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ListDomainsRequest, global::Zitadel.System.V1.ListDomainsResponse> __Method_ListDomains = new grpc::Method<global::Zitadel.System.V1.ListDomainsRequest, global::Zitadel.System.V1.ListDomainsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListDomains",
        __Marshaller_zitadel_system_v1_ListDomainsRequest,
        __Marshaller_zitadel_system_v1_ListDomainsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.AddDomainRequest, global::Zitadel.System.V1.AddDomainResponse> __Method_AddDomain = new grpc::Method<global::Zitadel.System.V1.AddDomainRequest, global::Zitadel.System.V1.AddDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddDomain",
        __Marshaller_zitadel_system_v1_AddDomainRequest,
        __Marshaller_zitadel_system_v1_AddDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.RemoveDomainRequest, global::Zitadel.System.V1.RemoveDomainResponse> __Method_RemoveDomain = new grpc::Method<global::Zitadel.System.V1.RemoveDomainRequest, global::Zitadel.System.V1.RemoveDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveDomain",
        __Marshaller_zitadel_system_v1_RemoveDomainRequest,
        __Marshaller_zitadel_system_v1_RemoveDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.SetPrimaryDomainRequest, global::Zitadel.System.V1.SetPrimaryDomainResponse> __Method_SetPrimaryDomain = new grpc::Method<global::Zitadel.System.V1.SetPrimaryDomainRequest, global::Zitadel.System.V1.SetPrimaryDomainResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPrimaryDomain",
        __Marshaller_zitadel_system_v1_SetPrimaryDomainRequest,
        __Marshaller_zitadel_system_v1_SetPrimaryDomainResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ListViewsRequest, global::Zitadel.System.V1.ListViewsResponse> __Method_ListViews = new grpc::Method<global::Zitadel.System.V1.ListViewsRequest, global::Zitadel.System.V1.ListViewsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListViews",
        __Marshaller_zitadel_system_v1_ListViewsRequest,
        __Marshaller_zitadel_system_v1_ListViewsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ClearViewRequest, global::Zitadel.System.V1.ClearViewResponse> __Method_ClearView = new grpc::Method<global::Zitadel.System.V1.ClearViewRequest, global::Zitadel.System.V1.ClearViewResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearView",
        __Marshaller_zitadel_system_v1_ClearViewRequest,
        __Marshaller_zitadel_system_v1_ClearViewResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ListFailedEventsRequest, global::Zitadel.System.V1.ListFailedEventsResponse> __Method_ListFailedEvents = new grpc::Method<global::Zitadel.System.V1.ListFailedEventsRequest, global::Zitadel.System.V1.ListFailedEventsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListFailedEvents",
        __Marshaller_zitadel_system_v1_ListFailedEventsRequest,
        __Marshaller_zitadel_system_v1_ListFailedEventsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.RemoveFailedEventRequest, global::Zitadel.System.V1.RemoveFailedEventResponse> __Method_RemoveFailedEvent = new grpc::Method<global::Zitadel.System.V1.RemoveFailedEventRequest, global::Zitadel.System.V1.RemoveFailedEventResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveFailedEvent",
        __Marshaller_zitadel_system_v1_RemoveFailedEventRequest,
        __Marshaller_zitadel_system_v1_RemoveFailedEventResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.AddQuotaRequest, global::Zitadel.System.V1.AddQuotaResponse> __Method_AddQuota = new grpc::Method<global::Zitadel.System.V1.AddQuotaRequest, global::Zitadel.System.V1.AddQuotaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddQuota",
        __Marshaller_zitadel_system_v1_AddQuotaRequest,
        __Marshaller_zitadel_system_v1_AddQuotaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.SetQuotaRequest, global::Zitadel.System.V1.SetQuotaResponse> __Method_SetQuota = new grpc::Method<global::Zitadel.System.V1.SetQuotaRequest, global::Zitadel.System.V1.SetQuotaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetQuota",
        __Marshaller_zitadel_system_v1_SetQuotaRequest,
        __Marshaller_zitadel_system_v1_SetQuotaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.RemoveQuotaRequest, global::Zitadel.System.V1.RemoveQuotaResponse> __Method_RemoveQuota = new grpc::Method<global::Zitadel.System.V1.RemoveQuotaRequest, global::Zitadel.System.V1.RemoveQuotaResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveQuota",
        __Marshaller_zitadel_system_v1_RemoveQuotaRequest,
        __Marshaller_zitadel_system_v1_RemoveQuotaResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.SetInstanceFeatureRequest, global::Zitadel.System.V1.SetInstanceFeatureResponse> __Method_SetInstanceFeature = new grpc::Method<global::Zitadel.System.V1.SetInstanceFeatureRequest, global::Zitadel.System.V1.SetInstanceFeatureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetInstanceFeature",
        __Marshaller_zitadel_system_v1_SetInstanceFeatureRequest,
        __Marshaller_zitadel_system_v1_SetInstanceFeatureResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.SetLimitsRequest, global::Zitadel.System.V1.SetLimitsResponse> __Method_SetLimits = new grpc::Method<global::Zitadel.System.V1.SetLimitsRequest, global::Zitadel.System.V1.SetLimitsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetLimits",
        __Marshaller_zitadel_system_v1_SetLimitsRequest,
        __Marshaller_zitadel_system_v1_SetLimitsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.BulkSetLimitsRequest, global::Zitadel.System.V1.BulkSetLimitsResponse> __Method_BulkSetLimits = new grpc::Method<global::Zitadel.System.V1.BulkSetLimitsRequest, global::Zitadel.System.V1.BulkSetLimitsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BulkSetLimits",
        __Marshaller_zitadel_system_v1_BulkSetLimitsRequest,
        __Marshaller_zitadel_system_v1_BulkSetLimitsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Zitadel.System.V1.ResetLimitsRequest, global::Zitadel.System.V1.ResetLimitsResponse> __Method_ResetLimits = new grpc::Method<global::Zitadel.System.V1.ResetLimitsRequest, global::Zitadel.System.V1.ResetLimitsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetLimits",
        __Marshaller_zitadel_system_v1_ResetLimitsRequest,
        __Marshaller_zitadel_system_v1_ResetLimitsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Zitadel.System.V1.SystemReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SystemService</summary>
    [grpc::BindServiceMethod(typeof(SystemService), "BindService")]
    public abstract partial class SystemServiceBase
    {
      /// <summary>
      ///Indicates if ZITADEL is running.
      /// It respondes as soon as ZITADEL started
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.HealthzResponse> Healthz(global::Zitadel.System.V1.HealthzRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns a list of ZITADEL instances
      ///
      /// Deprecated: Use [ListInstances](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-instances.api.mdx) instead to list instances
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ListInstancesResponse> ListInstances(global::Zitadel.System.V1.ListInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Returns the detail of an instance
      ///
      /// Deprecated: Use [GetInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-get-instance.api.mdx) instead to get the details of the instance in context
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.GetInstanceResponse> GetInstance(global::Zitadel.System.V1.GetInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deprecated: Use CreateInstance instead
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.AddInstanceResponse> AddInstance(global::Zitadel.System.V1.AddInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates name of an existing instance
      ///
      /// Deprecated: Use [UpdateInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-update-instance.api.mdx) instead to update the name of the instance in context
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.UpdateInstanceResponse> UpdateInstance(global::Zitadel.System.V1.UpdateInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.CreateInstanceResponse> CreateInstance(global::Zitadel.System.V1.CreateInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes an instance
      /// This might take some time
      ///
      /// Deprecated: Use [DeleteInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-delete-instance.api.mdx) instead to delete an instance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.RemoveInstanceResponse> RemoveInstance(global::Zitadel.System.V1.RemoveInstanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Returns all instance members matching the request
      /// all queries need to match (ANDed)
      /// Deprecated: Use the Admin APIs ListIAMMembers instead
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ListIAMMembersResponse> ListIAMMembers(global::Zitadel.System.V1.ListIAMMembersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Checks if a domain exists
      ///
      /// Deprecated: Use [ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead to check existence of an instance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ExistsDomainResponse> ExistsDomain(global::Zitadel.System.V1.ExistsDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// List Domains
      ///
      /// Deprecated: use [instance service v2 ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead.
      ///
      /// Returns the custom domains of an instance.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ListDomainsResponse> ListDomains(global::Zitadel.System.V1.ListDomainsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Adds a domain to an instance
      ///
      /// Deprecated: Use [AddCustomDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-add-custom-domain.api.mdx) instead to add a custom domain to the instance in context
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.AddDomainResponse> AddDomain(global::Zitadel.System.V1.AddDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes the domain of an instance
      ///
      /// Deprecated: Use [RemoveDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-remove-custom-domain.api.mdx) instead to remove a custom domain from the instance in context
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.RemoveDomainResponse> RemoveDomain(global::Zitadel.System.V1.RemoveDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets the primary domain of an instance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.SetPrimaryDomainResponse> SetPrimaryDomain(global::Zitadel.System.V1.SetPrimaryDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Returns all stored read models of ZITADEL
      /// views are used for search optimisation and optimise request latencies
      /// they represent the delta of the event happend on the objects
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ListViewsResponse> ListViews(global::Zitadel.System.V1.ListViewsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Truncates the delta of the change stream
      /// be carefull with this function because ZITADEL has to
      /// recompute the deltas after they got cleared.
      /// Search requests will return wrong results until all deltas are recomputed
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ClearViewResponse> ClearView(global::Zitadel.System.V1.ClearViewRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Returns event descriptions which cannot be processed.
      /// It's possible that some events need some retries.
      /// For example if the SMTP-API wasn't able to send an email at the first time
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ListFailedEventsResponse> ListFailedEvents(global::Zitadel.System.V1.ListFailedEventsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Deletes the event from failed events view.
      /// the event is not removed from the change stream
      /// This call is usefull if the system was able to process the event later.
      /// e.g. if the second try of sending an email was successful. the first try produced a
      /// failed event. You can find out if it worked on the `failure_count`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.RemoveFailedEventResponse> RemoveFailedEvent(global::Zitadel.System.V1.RemoveFailedEventRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Creates a new quota
      /// Returns an error if the quota already exists for the specified unit
      /// Deprecated: use SetQuota instead
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.AddQuotaResponse> AddQuota(global::Zitadel.System.V1.AddQuotaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets quota configuration properties
      /// Creates a new quota if it doesn't exist for the specified unit
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.SetQuotaResponse> SetQuota(global::Zitadel.System.V1.SetQuotaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Removes a quota
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.RemoveQuotaResponse> RemoveQuota(global::Zitadel.System.V1.RemoveQuotaRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set a feature flag on an instance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.SetInstanceFeatureResponse> SetInstanceFeature(global::Zitadel.System.V1.SetInstanceFeatureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets instance level limits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.SetLimitsResponse> SetLimits(global::Zitadel.System.V1.SetLimitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Sets many instance level limits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.BulkSetLimitsResponse> BulkSetLimits(global::Zitadel.System.V1.BulkSetLimitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Resets instance level limits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Zitadel.System.V1.ResetLimitsResponse> ResetLimits(global::Zitadel.System.V1.ResetLimitsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SystemService</summary>
    public partial class SystemServiceClient : grpc::ClientBase<SystemServiceClient>
    {
      /// <summary>Creates a new client for SystemService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SystemServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SystemService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public SystemServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SystemServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected SystemServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Indicates if ZITADEL is running.
      /// It respondes as soon as ZITADEL started
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.HealthzResponse Healthz(global::Zitadel.System.V1.HealthzRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Healthz(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Indicates if ZITADEL is running.
      /// It respondes as soon as ZITADEL started
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.HealthzResponse Healthz(global::Zitadel.System.V1.HealthzRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Healthz, null, options, request);
      }
      /// <summary>
      ///Indicates if ZITADEL is running.
      /// It respondes as soon as ZITADEL started
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.HealthzResponse> HealthzAsync(global::Zitadel.System.V1.HealthzRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HealthzAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Indicates if ZITADEL is running.
      /// It respondes as soon as ZITADEL started
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.HealthzResponse> HealthzAsync(global::Zitadel.System.V1.HealthzRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Healthz, null, options, request);
      }
      /// <summary>
      /// Returns a list of ZITADEL instances
      ///
      /// Deprecated: Use [ListInstances](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-instances.api.mdx) instead to list instances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListInstancesResponse ListInstances(global::Zitadel.System.V1.ListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of ZITADEL instances
      ///
      /// Deprecated: Use [ListInstances](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-instances.api.mdx) instead to list instances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListInstancesResponse ListInstances(global::Zitadel.System.V1.ListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Returns a list of ZITADEL instances
      ///
      /// Deprecated: Use [ListInstances](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-instances.api.mdx) instead to list instances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListInstancesResponse> ListInstancesAsync(global::Zitadel.System.V1.ListInstancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns a list of ZITADEL instances
      ///
      /// Deprecated: Use [ListInstances](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-instances.api.mdx) instead to list instances
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListInstancesResponse> ListInstancesAsync(global::Zitadel.System.V1.ListInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListInstances, null, options, request);
      }
      /// <summary>
      /// Returns the detail of an instance
      ///
      /// Deprecated: Use [GetInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-get-instance.api.mdx) instead to get the details of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.GetInstanceResponse GetInstance(global::Zitadel.System.V1.GetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the detail of an instance
      ///
      /// Deprecated: Use [GetInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-get-instance.api.mdx) instead to get the details of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.GetInstanceResponse GetInstance(global::Zitadel.System.V1.GetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      /// Returns the detail of an instance
      ///
      /// Deprecated: Use [GetInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-get-instance.api.mdx) instead to get the details of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.GetInstanceResponse> GetInstanceAsync(global::Zitadel.System.V1.GetInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the detail of an instance
      ///
      /// Deprecated: Use [GetInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-get-instance.api.mdx) instead to get the details of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.GetInstanceResponse> GetInstanceAsync(global::Zitadel.System.V1.GetInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInstance, null, options, request);
      }
      /// <summary>
      /// Deprecated: Use CreateInstance instead
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.AddInstanceResponse AddInstance(global::Zitadel.System.V1.AddInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated: Use CreateInstance instead
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.AddInstanceResponse AddInstance(global::Zitadel.System.V1.AddInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddInstance, null, options, request);
      }
      /// <summary>
      /// Deprecated: Use CreateInstance instead
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.AddInstanceResponse> AddInstanceAsync(global::Zitadel.System.V1.AddInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deprecated: Use CreateInstance instead
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.AddInstanceResponse> AddInstanceAsync(global::Zitadel.System.V1.AddInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddInstance, null, options, request);
      }
      /// <summary>
      /// Updates name of an existing instance
      ///
      /// Deprecated: Use [UpdateInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-update-instance.api.mdx) instead to update the name of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.UpdateInstanceResponse UpdateInstance(global::Zitadel.System.V1.UpdateInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates name of an existing instance
      ///
      /// Deprecated: Use [UpdateInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-update-instance.api.mdx) instead to update the name of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.UpdateInstanceResponse UpdateInstance(global::Zitadel.System.V1.UpdateInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateInstance, null, options, request);
      }
      /// <summary>
      /// Updates name of an existing instance
      ///
      /// Deprecated: Use [UpdateInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-update-instance.api.mdx) instead to update the name of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.UpdateInstanceResponse> UpdateInstanceAsync(global::Zitadel.System.V1.UpdateInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates name of an existing instance
      ///
      /// Deprecated: Use [UpdateInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-update-instance.api.mdx) instead to update the name of the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.UpdateInstanceResponse> UpdateInstanceAsync(global::Zitadel.System.V1.UpdateInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateInstance, null, options, request);
      }
      /// <summary>
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.CreateInstanceResponse CreateInstance(global::Zitadel.System.V1.CreateInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.CreateInstanceResponse CreateInstance(global::Zitadel.System.V1.CreateInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateInstance, null, options, request);
      }
      /// <summary>
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.CreateInstanceResponse> CreateInstanceAsync(global::Zitadel.System.V1.CreateInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new instance with all needed setup data
      /// This might take some time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.CreateInstanceResponse> CreateInstanceAsync(global::Zitadel.System.V1.CreateInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateInstance, null, options, request);
      }
      /// <summary>
      /// Removes an instance
      /// This might take some time
      ///
      /// Deprecated: Use [DeleteInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-delete-instance.api.mdx) instead to delete an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveInstanceResponse RemoveInstance(global::Zitadel.System.V1.RemoveInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInstance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes an instance
      /// This might take some time
      ///
      /// Deprecated: Use [DeleteInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-delete-instance.api.mdx) instead to delete an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveInstanceResponse RemoveInstance(global::Zitadel.System.V1.RemoveInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveInstance, null, options, request);
      }
      /// <summary>
      /// Removes an instance
      /// This might take some time
      ///
      /// Deprecated: Use [DeleteInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-delete-instance.api.mdx) instead to delete an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveInstanceResponse> RemoveInstanceAsync(global::Zitadel.System.V1.RemoveInstanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveInstanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes an instance
      /// This might take some time
      ///
      /// Deprecated: Use [DeleteInstance](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-delete-instance.api.mdx) instead to delete an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveInstanceResponse> RemoveInstanceAsync(global::Zitadel.System.V1.RemoveInstanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveInstance, null, options, request);
      }
      /// <summary>
      ///Returns all instance members matching the request
      /// all queries need to match (ANDed)
      /// Deprecated: Use the Admin APIs ListIAMMembers instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListIAMMembersResponse ListIAMMembers(global::Zitadel.System.V1.ListIAMMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIAMMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Returns all instance members matching the request
      /// all queries need to match (ANDed)
      /// Deprecated: Use the Admin APIs ListIAMMembers instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListIAMMembersResponse ListIAMMembers(global::Zitadel.System.V1.ListIAMMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListIAMMembers, null, options, request);
      }
      /// <summary>
      ///Returns all instance members matching the request
      /// all queries need to match (ANDed)
      /// Deprecated: Use the Admin APIs ListIAMMembers instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListIAMMembersResponse> ListIAMMembersAsync(global::Zitadel.System.V1.ListIAMMembersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListIAMMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Returns all instance members matching the request
      /// all queries need to match (ANDed)
      /// Deprecated: Use the Admin APIs ListIAMMembers instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListIAMMembersResponse> ListIAMMembersAsync(global::Zitadel.System.V1.ListIAMMembersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListIAMMembers, null, options, request);
      }
      /// <summary>
      /// Checks if a domain exists
      ///
      /// Deprecated: Use [ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead to check existence of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ExistsDomainResponse ExistsDomain(global::Zitadel.System.V1.ExistsDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistsDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a domain exists
      ///
      /// Deprecated: Use [ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead to check existence of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ExistsDomainResponse ExistsDomain(global::Zitadel.System.V1.ExistsDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExistsDomain, null, options, request);
      }
      /// <summary>
      /// Checks if a domain exists
      ///
      /// Deprecated: Use [ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead to check existence of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ExistsDomainResponse> ExistsDomainAsync(global::Zitadel.System.V1.ExistsDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistsDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Checks if a domain exists
      ///
      /// Deprecated: Use [ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead to check existence of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ExistsDomainResponse> ExistsDomainAsync(global::Zitadel.System.V1.ExistsDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExistsDomain, null, options, request);
      }
      /// <summary>
      /// List Domains
      ///
      /// Deprecated: use [instance service v2 ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead.
      ///
      /// Returns the custom domains of an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListDomainsResponse ListDomains(global::Zitadel.System.V1.ListDomainsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDomains(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Domains
      ///
      /// Deprecated: use [instance service v2 ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead.
      ///
      /// Returns the custom domains of an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListDomainsResponse ListDomains(global::Zitadel.System.V1.ListDomainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListDomains, null, options, request);
      }
      /// <summary>
      /// List Domains
      ///
      /// Deprecated: use [instance service v2 ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead.
      ///
      /// Returns the custom domains of an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListDomainsResponse> ListDomainsAsync(global::Zitadel.System.V1.ListDomainsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListDomainsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List Domains
      ///
      /// Deprecated: use [instance service v2 ListCustomDomains](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-list-custom-domains.api.mdx) instead.
      ///
      /// Returns the custom domains of an instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListDomainsResponse> ListDomainsAsync(global::Zitadel.System.V1.ListDomainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListDomains, null, options, request);
      }
      /// <summary>
      /// Adds a domain to an instance
      ///
      /// Deprecated: Use [AddCustomDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-add-custom-domain.api.mdx) instead to add a custom domain to the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.AddDomainResponse AddDomain(global::Zitadel.System.V1.AddDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a domain to an instance
      ///
      /// Deprecated: Use [AddCustomDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-add-custom-domain.api.mdx) instead to add a custom domain to the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.AddDomainResponse AddDomain(global::Zitadel.System.V1.AddDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddDomain, null, options, request);
      }
      /// <summary>
      /// Adds a domain to an instance
      ///
      /// Deprecated: Use [AddCustomDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-add-custom-domain.api.mdx) instead to add a custom domain to the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.AddDomainResponse> AddDomainAsync(global::Zitadel.System.V1.AddDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Adds a domain to an instance
      ///
      /// Deprecated: Use [AddCustomDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-add-custom-domain.api.mdx) instead to add a custom domain to the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.AddDomainResponse> AddDomainAsync(global::Zitadel.System.V1.AddDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddDomain, null, options, request);
      }
      /// <summary>
      /// Removes the domain of an instance
      ///
      /// Deprecated: Use [RemoveDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-remove-custom-domain.api.mdx) instead to remove a custom domain from the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveDomainResponse RemoveDomain(global::Zitadel.System.V1.RemoveDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes the domain of an instance
      ///
      /// Deprecated: Use [RemoveDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-remove-custom-domain.api.mdx) instead to remove a custom domain from the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveDomainResponse RemoveDomain(global::Zitadel.System.V1.RemoveDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveDomain, null, options, request);
      }
      /// <summary>
      /// Removes the domain of an instance
      ///
      /// Deprecated: Use [RemoveDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-remove-custom-domain.api.mdx) instead to remove a custom domain from the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveDomainResponse> RemoveDomainAsync(global::Zitadel.System.V1.RemoveDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes the domain of an instance
      ///
      /// Deprecated: Use [RemoveDomain](apis/resources/instance_service_v2/zitadel-instance-v-2-beta-instance-service-remove-custom-domain.api.mdx) instead to remove a custom domain from the instance in context
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveDomainResponse> RemoveDomainAsync(global::Zitadel.System.V1.RemoveDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveDomain, null, options, request);
      }
      /// <summary>
      /// Sets the primary domain of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetPrimaryDomainResponse SetPrimaryDomain(global::Zitadel.System.V1.SetPrimaryDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPrimaryDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the primary domain of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetPrimaryDomainResponse SetPrimaryDomain(global::Zitadel.System.V1.SetPrimaryDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPrimaryDomain, null, options, request);
      }
      /// <summary>
      /// Sets the primary domain of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetPrimaryDomainResponse> SetPrimaryDomainAsync(global::Zitadel.System.V1.SetPrimaryDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPrimaryDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets the primary domain of an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetPrimaryDomainResponse> SetPrimaryDomainAsync(global::Zitadel.System.V1.SetPrimaryDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPrimaryDomain, null, options, request);
      }
      /// <summary>
      ///Returns all stored read models of ZITADEL
      /// views are used for search optimisation and optimise request latencies
      /// they represent the delta of the event happend on the objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListViewsResponse ListViews(global::Zitadel.System.V1.ListViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListViews(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Returns all stored read models of ZITADEL
      /// views are used for search optimisation and optimise request latencies
      /// they represent the delta of the event happend on the objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListViewsResponse ListViews(global::Zitadel.System.V1.ListViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListViews, null, options, request);
      }
      /// <summary>
      ///Returns all stored read models of ZITADEL
      /// views are used for search optimisation and optimise request latencies
      /// they represent the delta of the event happend on the objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListViewsResponse> ListViewsAsync(global::Zitadel.System.V1.ListViewsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListViewsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Returns all stored read models of ZITADEL
      /// views are used for search optimisation and optimise request latencies
      /// they represent the delta of the event happend on the objects
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListViewsResponse> ListViewsAsync(global::Zitadel.System.V1.ListViewsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListViews, null, options, request);
      }
      /// <summary>
      ///Truncates the delta of the change stream
      /// be carefull with this function because ZITADEL has to
      /// recompute the deltas after they got cleared.
      /// Search requests will return wrong results until all deltas are recomputed
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ClearViewResponse ClearView(global::Zitadel.System.V1.ClearViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearView(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Truncates the delta of the change stream
      /// be carefull with this function because ZITADEL has to
      /// recompute the deltas after they got cleared.
      /// Search requests will return wrong results until all deltas are recomputed
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ClearViewResponse ClearView(global::Zitadel.System.V1.ClearViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearView, null, options, request);
      }
      /// <summary>
      ///Truncates the delta of the change stream
      /// be carefull with this function because ZITADEL has to
      /// recompute the deltas after they got cleared.
      /// Search requests will return wrong results until all deltas are recomputed
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ClearViewResponse> ClearViewAsync(global::Zitadel.System.V1.ClearViewRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClearViewAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Truncates the delta of the change stream
      /// be carefull with this function because ZITADEL has to
      /// recompute the deltas after they got cleared.
      /// Search requests will return wrong results until all deltas are recomputed
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ClearViewResponse> ClearViewAsync(global::Zitadel.System.V1.ClearViewRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearView, null, options, request);
      }
      /// <summary>
      ///Returns event descriptions which cannot be processed.
      /// It's possible that some events need some retries.
      /// For example if the SMTP-API wasn't able to send an email at the first time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListFailedEventsResponse ListFailedEvents(global::Zitadel.System.V1.ListFailedEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFailedEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Returns event descriptions which cannot be processed.
      /// It's possible that some events need some retries.
      /// For example if the SMTP-API wasn't able to send an email at the first time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ListFailedEventsResponse ListFailedEvents(global::Zitadel.System.V1.ListFailedEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListFailedEvents, null, options, request);
      }
      /// <summary>
      ///Returns event descriptions which cannot be processed.
      /// It's possible that some events need some retries.
      /// For example if the SMTP-API wasn't able to send an email at the first time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListFailedEventsResponse> ListFailedEventsAsync(global::Zitadel.System.V1.ListFailedEventsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListFailedEventsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Returns event descriptions which cannot be processed.
      /// It's possible that some events need some retries.
      /// For example if the SMTP-API wasn't able to send an email at the first time
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ListFailedEventsResponse> ListFailedEventsAsync(global::Zitadel.System.V1.ListFailedEventsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListFailedEvents, null, options, request);
      }
      /// <summary>
      ///Deletes the event from failed events view.
      /// the event is not removed from the change stream
      /// This call is usefull if the system was able to process the event later.
      /// e.g. if the second try of sending an email was successful. the first try produced a
      /// failed event. You can find out if it worked on the `failure_count`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveFailedEventResponse RemoveFailedEvent(global::Zitadel.System.V1.RemoveFailedEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveFailedEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Deletes the event from failed events view.
      /// the event is not removed from the change stream
      /// This call is usefull if the system was able to process the event later.
      /// e.g. if the second try of sending an email was successful. the first try produced a
      /// failed event. You can find out if it worked on the `failure_count`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveFailedEventResponse RemoveFailedEvent(global::Zitadel.System.V1.RemoveFailedEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveFailedEvent, null, options, request);
      }
      /// <summary>
      ///Deletes the event from failed events view.
      /// the event is not removed from the change stream
      /// This call is usefull if the system was able to process the event later.
      /// e.g. if the second try of sending an email was successful. the first try produced a
      /// failed event. You can find out if it worked on the `failure_count`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveFailedEventResponse> RemoveFailedEventAsync(global::Zitadel.System.V1.RemoveFailedEventRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveFailedEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Deletes the event from failed events view.
      /// the event is not removed from the change stream
      /// This call is usefull if the system was able to process the event later.
      /// e.g. if the second try of sending an email was successful. the first try produced a
      /// failed event. You can find out if it worked on the `failure_count`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveFailedEventResponse> RemoveFailedEventAsync(global::Zitadel.System.V1.RemoveFailedEventRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveFailedEvent, null, options, request);
      }
      /// <summary>
      /// Creates a new quota
      /// Returns an error if the quota already exists for the specified unit
      /// Deprecated: use SetQuota instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.AddQuotaResponse AddQuota(global::Zitadel.System.V1.AddQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddQuota(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new quota
      /// Returns an error if the quota already exists for the specified unit
      /// Deprecated: use SetQuota instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.AddQuotaResponse AddQuota(global::Zitadel.System.V1.AddQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddQuota, null, options, request);
      }
      /// <summary>
      /// Creates a new quota
      /// Returns an error if the quota already exists for the specified unit
      /// Deprecated: use SetQuota instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.AddQuotaResponse> AddQuotaAsync(global::Zitadel.System.V1.AddQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddQuotaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new quota
      /// Returns an error if the quota already exists for the specified unit
      /// Deprecated: use SetQuota instead
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.AddQuotaResponse> AddQuotaAsync(global::Zitadel.System.V1.AddQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddQuota, null, options, request);
      }
      /// <summary>
      /// Sets quota configuration properties
      /// Creates a new quota if it doesn't exist for the specified unit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetQuotaResponse SetQuota(global::Zitadel.System.V1.SetQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetQuota(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets quota configuration properties
      /// Creates a new quota if it doesn't exist for the specified unit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetQuotaResponse SetQuota(global::Zitadel.System.V1.SetQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetQuota, null, options, request);
      }
      /// <summary>
      /// Sets quota configuration properties
      /// Creates a new quota if it doesn't exist for the specified unit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetQuotaResponse> SetQuotaAsync(global::Zitadel.System.V1.SetQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetQuotaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets quota configuration properties
      /// Creates a new quota if it doesn't exist for the specified unit
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetQuotaResponse> SetQuotaAsync(global::Zitadel.System.V1.SetQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetQuota, null, options, request);
      }
      /// <summary>
      /// Removes a quota
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveQuotaResponse RemoveQuota(global::Zitadel.System.V1.RemoveQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveQuota(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a quota
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.RemoveQuotaResponse RemoveQuota(global::Zitadel.System.V1.RemoveQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveQuota, null, options, request);
      }
      /// <summary>
      /// Removes a quota
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveQuotaResponse> RemoveQuotaAsync(global::Zitadel.System.V1.RemoveQuotaRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RemoveQuotaAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Removes a quota
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.RemoveQuotaResponse> RemoveQuotaAsync(global::Zitadel.System.V1.RemoveQuotaRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveQuota, null, options, request);
      }
      /// <summary>
      /// Set a feature flag on an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetInstanceFeatureResponse SetInstanceFeature(global::Zitadel.System.V1.SetInstanceFeatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetInstanceFeature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set a feature flag on an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetInstanceFeatureResponse SetInstanceFeature(global::Zitadel.System.V1.SetInstanceFeatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetInstanceFeature, null, options, request);
      }
      /// <summary>
      /// Set a feature flag on an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetInstanceFeatureResponse> SetInstanceFeatureAsync(global::Zitadel.System.V1.SetInstanceFeatureRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetInstanceFeatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set a feature flag on an instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetInstanceFeatureResponse> SetInstanceFeatureAsync(global::Zitadel.System.V1.SetInstanceFeatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetInstanceFeature, null, options, request);
      }
      /// <summary>
      /// Sets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetLimitsResponse SetLimits(global::Zitadel.System.V1.SetLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLimits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.SetLimitsResponse SetLimits(global::Zitadel.System.V1.SetLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetLimits, null, options, request);
      }
      /// <summary>
      /// Sets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetLimitsResponse> SetLimitsAsync(global::Zitadel.System.V1.SetLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetLimitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.SetLimitsResponse> SetLimitsAsync(global::Zitadel.System.V1.SetLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetLimits, null, options, request);
      }
      /// <summary>
      /// Sets many instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.BulkSetLimitsResponse BulkSetLimits(global::Zitadel.System.V1.BulkSetLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkSetLimits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets many instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.BulkSetLimitsResponse BulkSetLimits(global::Zitadel.System.V1.BulkSetLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BulkSetLimits, null, options, request);
      }
      /// <summary>
      /// Sets many instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.BulkSetLimitsResponse> BulkSetLimitsAsync(global::Zitadel.System.V1.BulkSetLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BulkSetLimitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Sets many instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.BulkSetLimitsResponse> BulkSetLimitsAsync(global::Zitadel.System.V1.BulkSetLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BulkSetLimits, null, options, request);
      }
      /// <summary>
      /// Resets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ResetLimitsResponse ResetLimits(global::Zitadel.System.V1.ResetLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetLimits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Zitadel.System.V1.ResetLimitsResponse ResetLimits(global::Zitadel.System.V1.ResetLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetLimits, null, options, request);
      }
      /// <summary>
      /// Resets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ResetLimitsResponse> ResetLimitsAsync(global::Zitadel.System.V1.ResetLimitsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetLimitsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Resets instance level limits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Zitadel.System.V1.ResetLimitsResponse> ResetLimitsAsync(global::Zitadel.System.V1.ResetLimitsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetLimits, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override SystemServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SystemServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(SystemServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Healthz, serviceImpl.Healthz)
          .AddMethod(__Method_ListInstances, serviceImpl.ListInstances)
          .AddMethod(__Method_GetInstance, serviceImpl.GetInstance)
          .AddMethod(__Method_AddInstance, serviceImpl.AddInstance)
          .AddMethod(__Method_UpdateInstance, serviceImpl.UpdateInstance)
          .AddMethod(__Method_CreateInstance, serviceImpl.CreateInstance)
          .AddMethod(__Method_RemoveInstance, serviceImpl.RemoveInstance)
          .AddMethod(__Method_ListIAMMembers, serviceImpl.ListIAMMembers)
          .AddMethod(__Method_ExistsDomain, serviceImpl.ExistsDomain)
          .AddMethod(__Method_ListDomains, serviceImpl.ListDomains)
          .AddMethod(__Method_AddDomain, serviceImpl.AddDomain)
          .AddMethod(__Method_RemoveDomain, serviceImpl.RemoveDomain)
          .AddMethod(__Method_SetPrimaryDomain, serviceImpl.SetPrimaryDomain)
          .AddMethod(__Method_ListViews, serviceImpl.ListViews)
          .AddMethod(__Method_ClearView, serviceImpl.ClearView)
          .AddMethod(__Method_ListFailedEvents, serviceImpl.ListFailedEvents)
          .AddMethod(__Method_RemoveFailedEvent, serviceImpl.RemoveFailedEvent)
          .AddMethod(__Method_AddQuota, serviceImpl.AddQuota)
          .AddMethod(__Method_SetQuota, serviceImpl.SetQuota)
          .AddMethod(__Method_RemoveQuota, serviceImpl.RemoveQuota)
          .AddMethod(__Method_SetInstanceFeature, serviceImpl.SetInstanceFeature)
          .AddMethod(__Method_SetLimits, serviceImpl.SetLimits)
          .AddMethod(__Method_BulkSetLimits, serviceImpl.BulkSetLimits)
          .AddMethod(__Method_ResetLimits, serviceImpl.ResetLimits).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SystemServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Healthz, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.HealthzRequest, global::Zitadel.System.V1.HealthzResponse>(serviceImpl.Healthz));
      serviceBinder.AddMethod(__Method_ListInstances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ListInstancesRequest, global::Zitadel.System.V1.ListInstancesResponse>(serviceImpl.ListInstances));
      serviceBinder.AddMethod(__Method_GetInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.GetInstanceRequest, global::Zitadel.System.V1.GetInstanceResponse>(serviceImpl.GetInstance));
      serviceBinder.AddMethod(__Method_AddInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.AddInstanceRequest, global::Zitadel.System.V1.AddInstanceResponse>(serviceImpl.AddInstance));
      serviceBinder.AddMethod(__Method_UpdateInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.UpdateInstanceRequest, global::Zitadel.System.V1.UpdateInstanceResponse>(serviceImpl.UpdateInstance));
      serviceBinder.AddMethod(__Method_CreateInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.CreateInstanceRequest, global::Zitadel.System.V1.CreateInstanceResponse>(serviceImpl.CreateInstance));
      serviceBinder.AddMethod(__Method_RemoveInstance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.RemoveInstanceRequest, global::Zitadel.System.V1.RemoveInstanceResponse>(serviceImpl.RemoveInstance));
      serviceBinder.AddMethod(__Method_ListIAMMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ListIAMMembersRequest, global::Zitadel.System.V1.ListIAMMembersResponse>(serviceImpl.ListIAMMembers));
      serviceBinder.AddMethod(__Method_ExistsDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ExistsDomainRequest, global::Zitadel.System.V1.ExistsDomainResponse>(serviceImpl.ExistsDomain));
      serviceBinder.AddMethod(__Method_ListDomains, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ListDomainsRequest, global::Zitadel.System.V1.ListDomainsResponse>(serviceImpl.ListDomains));
      serviceBinder.AddMethod(__Method_AddDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.AddDomainRequest, global::Zitadel.System.V1.AddDomainResponse>(serviceImpl.AddDomain));
      serviceBinder.AddMethod(__Method_RemoveDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.RemoveDomainRequest, global::Zitadel.System.V1.RemoveDomainResponse>(serviceImpl.RemoveDomain));
      serviceBinder.AddMethod(__Method_SetPrimaryDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.SetPrimaryDomainRequest, global::Zitadel.System.V1.SetPrimaryDomainResponse>(serviceImpl.SetPrimaryDomain));
      serviceBinder.AddMethod(__Method_ListViews, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ListViewsRequest, global::Zitadel.System.V1.ListViewsResponse>(serviceImpl.ListViews));
      serviceBinder.AddMethod(__Method_ClearView, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ClearViewRequest, global::Zitadel.System.V1.ClearViewResponse>(serviceImpl.ClearView));
      serviceBinder.AddMethod(__Method_ListFailedEvents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ListFailedEventsRequest, global::Zitadel.System.V1.ListFailedEventsResponse>(serviceImpl.ListFailedEvents));
      serviceBinder.AddMethod(__Method_RemoveFailedEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.RemoveFailedEventRequest, global::Zitadel.System.V1.RemoveFailedEventResponse>(serviceImpl.RemoveFailedEvent));
      serviceBinder.AddMethod(__Method_AddQuota, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.AddQuotaRequest, global::Zitadel.System.V1.AddQuotaResponse>(serviceImpl.AddQuota));
      serviceBinder.AddMethod(__Method_SetQuota, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.SetQuotaRequest, global::Zitadel.System.V1.SetQuotaResponse>(serviceImpl.SetQuota));
      serviceBinder.AddMethod(__Method_RemoveQuota, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.RemoveQuotaRequest, global::Zitadel.System.V1.RemoveQuotaResponse>(serviceImpl.RemoveQuota));
      serviceBinder.AddMethod(__Method_SetInstanceFeature, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.SetInstanceFeatureRequest, global::Zitadel.System.V1.SetInstanceFeatureResponse>(serviceImpl.SetInstanceFeature));
      serviceBinder.AddMethod(__Method_SetLimits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.SetLimitsRequest, global::Zitadel.System.V1.SetLimitsResponse>(serviceImpl.SetLimits));
      serviceBinder.AddMethod(__Method_BulkSetLimits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.BulkSetLimitsRequest, global::Zitadel.System.V1.BulkSetLimitsResponse>(serviceImpl.BulkSetLimits));
      serviceBinder.AddMethod(__Method_ResetLimits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Zitadel.System.V1.ResetLimitsRequest, global::Zitadel.System.V1.ResetLimitsResponse>(serviceImpl.ResetLimits));
    }

  }
}
#endregion
